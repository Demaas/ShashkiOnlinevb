// script.js - –§–ò–ù–ê–õ–¨–ù–ê–Ø –í–ï–†–°–ò–Ø –¥–ª—è —à–∞—à–µ–∫
class CheckersGame {
  constructor() {
    this.board = document.getElementById("board");
    this.status = document.getElementById("status");
    this.currentPlayer = "white";
    this.selectedPiece = null;
    this.possibleMoves = [];
    this.playerColor = null;
    this.ws = null;

    this.initializeGame();
    this.setupWebSocket();
  }

  initializeGame() {
    this.createBoard();
    this.updateStatus("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É...");
  }

  createBoard() {
    this.board.innerHTML = "";
    for (let row = 0; row < 8; row++) {
      for (let col = 0; col < 8; col++) {
        const cell = document.createElement("div");
        cell.className = `cell ${(row + col) % 2 === 0 ? "white" : "black"}`;
        cell.dataset.row = row;
        cell.dataset.col = col;

        // –¢–æ–ª—å–∫–æ —á–µ—Ä–Ω—ã–µ –∫–ª–µ—Ç–∫–∏ –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã
        if ((row + col) % 2 !== 0) {
          cell.addEventListener("click", () => this.handleCellClick(row, col));
        }

        this.board.appendChild(cell);
      }
    }
  }

  handleCellClick(row, col) {
    console.log("Cell clicked:", row, col);

    if (!this.playerColor) {
      this.updateStatus("–û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...");
      return;
    }

    if (this.playerColor !== this.currentPlayer) {
      this.updateStatus("–°–µ–π—á–∞—Å –Ω–µ –≤–∞—à —Ö–æ–¥!");
      return;
    }

    const cell = this.getCell(row, col);
    const piece = cell.querySelector(".piece");

    // –ï—Å–ª–∏ —É–∂–µ –≤—ã–±—Ä–∞–Ω–∞ —à–∞—à–∫–∞ - –ø—Ä–æ–±—É–µ–º —Å–¥–µ–ª–∞—Ç—å —Ö–æ–¥
    if (this.selectedPiece) {
      this.makeMove(this.selectedPiece.row, this.selectedPiece.col, row, col);
      this.clearSelection();
    }
    // –ï—Å–ª–∏ –∫–ª–∏–∫–Ω—É–ª–∏ –Ω–∞ —Å–≤–æ—é —à–∞—à–∫—É - –≤—ã–±–∏—Ä–∞–µ–º –µ—ë
    else if (piece && piece.dataset.color === this.playerColor) {
      this.selectedPiece = { row, col };
      this.highlightCell(row, col, "selected");
      this.updateStatus("–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–µ—Ç–∫—É –¥–ª—è —Ö–æ–¥–∞");
    }
  }

  makeMove(fromRow, fromCol, toRow, toCol) {
    if (!this.ws || this.ws.readyState !== WebSocket.OPEN) {
      this.updateStatus("–ù–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º");
      return;
    }

    const moveData = {
      fromRow: fromRow,
      fromCol: fromCol,
      toRow: toRow,
      toCol: toCol,
    };

    console.log("Sending move:", moveData);
    this.ws.send(
      JSON.stringify({
        type: "move",
        data: moveData,
      })
    );

    this.updateStatus("–•–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è...");
  }

  setupWebSocket() {
    const protocol = window.location.protocol === "https:" ? "wss:" : "ws:";
    const wsUrl = `${protocol}//${window.location.host}`;

    console.log("Connecting to WebSocket:", wsUrl);

    this.ws = new WebSocket(wsUrl);

    this.ws.onopen = () => {
      console.log("‚úÖ WebSocket connected successfully");
      this.updateStatus("–ü–æ–¥–∫–ª—é—á–µ–Ω–æ! –û–∂–∏–¥–∞–Ω–∏–µ –≤—Ç–æ—Ä–æ–≥–æ –∏–≥—Ä–æ–∫–∞...");
    };

    this.ws.onmessage = (event) => {
      try {
        const message = JSON.parse(event.data);
        console.log("üì® Received message:", message);
        this.handleServerMessage(message);
      } catch (error) {
        console.error("‚ùå Error parsing message:", error);
      }
    };

    this.ws.onclose = (event) => {
      console.log("üîå WebSocket disconnected:", event.code, event.reason);
      this.updateStatus(
        "–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø–æ—Ç–µ—Ä—è–Ω–æ. –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã..."
      );
      setTimeout(() => {
        this.setupWebSocket();
      }, 3000);
    };

    this.ws.onerror = (error) => {
      console.error("üí• WebSocket error:", error);
      this.updateStatus("–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º");
    };
  }

  handleServerMessage(message) {
    switch (message.type) {
      case "playerAssigned":
        this.playerColor = message.color;
        const colorText = message.color === "white" ? "–±–µ–ª—ã–µ" : "—á–µ—Ä–Ω—ã–µ";
        this.updateStatus(
          `–í—ã –∏–≥—Ä–∞–µ—Ç–µ –∑–∞ ${colorText}. –û–∂–∏–¥–∞–Ω–∏–µ –≤—Ç–æ—Ä–æ–≥–æ –∏–≥—Ä–æ–∫–∞...`
        );
        break;

      case "gameState":
        this.updateGameState(message.data);
        break;

      case "moveResult":
        if (message.valid) {
          this.updateGameState(message.gameState);
          const statusText =
            message.gameState.currentPlayer === this.playerColor
              ? "‚úÖ –í–∞—à —Ö–æ–¥!"
              : "‚è≥ –•–æ–¥ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞...";
          this.updateStatus(statusText);
        } else {
          this.updateStatus(`‚ùå ${message.message}`);
        }
        break;

      case "gameOver":
        const winnerText = message.winner
          ? `üèÜ –ü–æ–±–µ–¥–∏—Ç–µ–ª—å: ${message.winner === "white" ? "–±–µ–ª—ã–µ" : "—á–µ—Ä–Ω—ã–µ"}`
          : "ü§ù –ù–∏—á—å—è!";
        this.updateStatus(`–ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞! ${winnerText}`);

        setTimeout(() => {
          if (confirm("–ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –•–æ—Ç–∏—Ç–µ —Å—ã–≥—Ä–∞—Ç—å –µ—â–µ?")) {
            location.reload();
          }
        }, 1500);
        break;

      case "error":
        this.updateStatus(`‚ö†Ô∏è ${message.message}`);
        break;

      default:
        console.log("Unknown message type:", message.type);
    }
  }

  updateGameState(gameState) {
    // –û—á–∏—â–∞–µ–º –¥–æ—Å–∫—É
    document.querySelectorAll(".piece").forEach((piece) => piece.remove());

    // –†–∞—Å—Å—Ç–∞–≤–ª—è–µ–º —à–∞—à–∫–∏ —Å–æ–≥–ª–∞—Å–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏—é –∏–≥—Ä—ã
    gameState.pieces.forEach((piece) => {
      this.placePiece(piece.row, piece.col, piece.color, piece.isKing);
    });

    // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞
    this.currentPlayer = gameState.currentPlayer;

    console.log("Game state updated. Current player:", this.currentPlayer);
  }

  placePiece(row, col, color, isKing = false) {
    const cell = this.getCell(row, col);
    if (!cell) return;

    const piece = document.createElement("div");
    piece.className = `piece ${color} ${isKing ? "king" : ""}`;
    piece.dataset.color = color;
    piece.dataset.king = isKing;

    // –°–æ–∑–¥–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —à–∞—à–∫–∏
    const img = document.createElement("img");
    let imageSrc;

    if (color === "white") {
      imageSrc = isKing ? "shabedam.png" : "shabe.png";
    } else {
      imageSrc = isKing ? "shachdam.png" : "shach.png";
    }

    img.src = imageSrc;
    img.alt = isKing ? `${color} –¥–∞–º–∫–∞` : `${color} —à–∞—à–∫–∞`;
    img.onerror = () => {
      console.error(`Failed to load image: ${imageSrc}`);
      // –ó–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç - —Ü–≤–µ—Ç–Ω–æ–π –∫—Ä—É–≥
      piece.style.backgroundColor = color;
      piece.style.border = "2px solid #000";
      if (isKing) {
        piece.innerHTML = "‚ôî";
        piece.style.color = "gold";
      }
    };

    piece.appendChild(img);
    cell.appendChild(piece);
  }

  getCell(row, col) {
    return document.querySelector(
      `.cell[data-row="${row}"][data-col="${col}"]`
    );
  }

  highlightCell(row, col, className) {
    const cell = this.getCell(row, col);
    if (cell) {
      // –°–Ω–∞—á–∞–ª–∞ —É–±–∏—Ä–∞–µ–º –≤—Å–µ –≤—ã–¥–µ–ª–µ–Ω–∏—è
      document.querySelectorAll(".cell").forEach((c) => {
        c.classList.remove("selected", "possible-move");
      });
      // –ó–∞—Ç–µ–º –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
      cell.classList.add(className);
    }
  }

  clearSelection() {
    this.selectedPiece = null;
    document.querySelectorAll(".cell").forEach((cell) => {
      cell.classList.remove("selected", "possible-move");
    });
  }

  updateStatus(message) {
    if (this.status) {
      this.status.textContent = message;
    }
    console.log("Status:", message);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –∏–≥—Ä—É –∫–æ–≥–¥–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–≥—Ä—É–∂–µ–Ω–∞
document.addEventListener("DOMContentLoaded", () => {
  console.log("üöÄ Starting Checkers Game...");
  new CheckersGame();
});

// –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –ø—Ä–∏ –≤–∏–¥–∏–º–æ—Å—Ç–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener("visibilitychange", () => {
  if (!document.hidden) {
    // –°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å–Ω–æ–≤–∞ —Å—Ç–∞–ª–∞ –∞–∫—Ç–∏–≤–Ω–æ–π - –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
    console.log("Page became visible, checking connection...");
  }
});
