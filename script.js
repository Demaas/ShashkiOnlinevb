// script.js - –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø —Å —á–∞—Ç–æ–º –∏ —Å–º–∞–π–ª–∏–∫–∞–º–∏
class CheckersGame {
  constructor() {
    this.board = document.getElementById("board");
    this.status = document.getElementById("status");
    this.restartContainer = document.getElementById("restartContainer");
    this.restartButton = document.getElementById("restartButton");
    this.loginModal = document.getElementById("loginModal");
    this.usernameInput = document.getElementById("usernameInput");
    this.startGameButton = document.getElementById("startGameButton");

    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞ –¥–ª—è –∫–Ω–æ–ø–æ–∫
    this.newGameButton = document.getElementById("newGameButton");
    this.drawOfferButton = document.getElementById("drawOfferButton");
    this.surrenderButton = document.getElementById("surrenderButton");
    this.newGameModal = document.getElementById("newGameModal");
    this.drawOfferModal = document.getElementById("drawOfferModal");
    this.surrenderFirstModal = document.getElementById("surrenderFirstModal");
    this.surrenderSecondModal = document.getElementById("surrenderSecondModal");
    this.confirmNewGame = document.getElementById("confirmNewGame");
    this.cancelNewGame = document.getElementById("cancelNewGame");
    this.acceptDraw = document.getElementById("acceptDraw");
    this.rejectDraw = document.getElementById("rejectDraw");
    this.drawOfferText = document.getElementById("drawOfferText");
    this.surrenderFirstConfirm = document.getElementById(
      "surrenderFirstConfirm"
    );
    this.surrenderFinalConfirm = document.getElementById(
      "surrenderFinalConfirm"
    );
    this.surrenderCancel = document.getElementById("surrenderCancel");

    // –î–æ–±–∞–≤–ª—è–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞
    this.restartModal = document.getElementById("restartModal");
    this.restartMessage = document.getElementById("restartMessage");
    this.confirmRestart = document.getElementById("confirmRestart");
    this.declineRestart = document.getElementById("declineRestart");

    // ‚òÖ‚òÖ‚òÖ –î–û–ë–ê–í–õ–ï–ù –≠–õ–ï–ú–ï–ù–¢ –£–ü–†–ê–í–õ–ï–ù–ò–Ø –ö–ù–û–ü–ö–ê–ú–ò ‚òÖ‚òÖ‚òÖ
    this.gameControls = document.getElementById("gameControls");

    // ‚òÖ‚òÖ‚òÖ –î–û–ë–ê–í–õ–ï–ù–´ –≠–õ–ï–ú–ï–ù–¢–´ –î–õ–Ø –î–ò–ù–ê–ú–ò–ß–ï–°–ö–û–ì–û –ò–ó–ú–ï–ù–ï–ù–ò–Ø –¢–ï–ö–°–¢–ê ‚òÖ‚òÖ‚òÖ
    this.newGameModalTitle = document.getElementById("newGameModalTitle");
    this.newGameModalMessage = document.getElementById("newGameModalMessage");

    // ‚òÖ‚òÖ‚òÖ –î–û–ë–ê–í–õ–ï–ù–´ –≠–õ–ï–ú–ï–ù–¢–´ –î–õ–Ø –ß–ê–¢–ê –ò –°–ú–ê–ô–õ–ò–ö–û–í ‚òÖ‚òÖ‚òÖ
    this.chatHistory = document.getElementById("chatHistory");
    this.chatInput = document.getElementById("chatInput");
    this.sendMessageBtn = document.getElementById("sendMessageBtn");
    this.smileyBtns = document.querySelectorAll(".smiley-btn");

    console.log("üí¨ Chat elements state:", {
      chatHistory: this.chatHistory ? "found" : "not found",
      chatInput: this.chatInput
        ? `found (value: "${this.chatInput.value}")`
        : "not found",
      sendMessageBtn: this.sendMessageBtn ? "found" : "not found",
      smileyBtns: `found ${this.smileyBtns.length} buttons`,
    });

    // –ó–≤—É–∫–∏ –¥–ª—è —Å–º–∞–π–ª–∏–∫–æ–≤
    this.sounds = {
      laugh: document.getElementById("laughSound"),
      sad: document.getElementById("sadSound"),
      cool: document.getElementById("coolSound"),
      suck: document.getElementById("suckSound"),
      think: document.getElementById("thinkSound"),
      smirk: document.getElementById("smirkSound"),
    };

    this.currentPlayer = "white";
    this.selectedPiece = null;
    this.possibleMoves = [];
    this.playerColor = null;
    this.ws = null;
    this.currentArrow = null;
    this.arrowTimeout = null;
    this.username = "";
    this.opponentName = "";

    // ‚òÖ‚òÖ‚òÖ –î–û–ë–ê–í–õ–ï–ù–ê –ü–ï–†–ï–ú–ï–ù–ù–ê–Ø –î–õ–Ø –û–¢–°–õ–ï–ñ–ò–í–ê–ù–ò–Ø –°–û–°–¢–û–Ø–ù–ò–Ø –ò–ì–†–´ ‚òÖ‚òÖ‚òÖ
    this.gameReady = false; // false - –∏–≥—Ä–∞ –Ω–µ –≥–æ—Ç–æ–≤–∞, true - –º–æ–∂–Ω–æ —Ö–æ–¥–∏—Ç—å

    // ‚òÖ‚òÖ‚òÖ –î–û–ë–ê–í–õ–ï–ù–´ –ù–û–í–´–ï –ü–ï–†–ï–ú–ï–ù–ù–´–ï –î–õ–Ø –ò–ù–§–û–†–ú–ê–¶–ò–ò –û–ë –ò–ì–†–û–ö–ê–• ‚òÖ‚òÖ‚òÖ
    this.continueCapturePiece = null; // –î–ª—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –≤–∑—è—Ç–∏—è

    // ‚òÖ‚òÖ‚òÖ –î–û–ë–ê–í–õ–ï–ù–ê –ü–ï–†–ï–ú–ï–ù–ù–ê–Ø –î–õ–Ø –û–¢–°–õ–ï–ñ–ò–í–ê–ù–ò–Ø –°–î–ê–ß–ò ‚òÖ‚òÖ‚òÖ
    this.surrenderAttempts = 0; // 0 - –ø–µ—Ä–≤–æ–µ –Ω–∞–∂–∞—Ç–∏–µ, 1+ - –ø–æ—Å–ª–µ–¥—É—é—â–∏–µ

    this.setupLogin();
    this.initializeGame();
    this.setupRestartButton();
    this.setupGameControls();
    this.setupRestartModal();
    this.setupChatAndSmileys(); // ‚òÖ‚òÖ‚òÖ –î–û–ë–ê–í–õ–ï–ù –í–´–ó–û–í ‚òÖ‚òÖ‚òÖ

    // ‚òÖ‚òÖ‚òÖ –î–û–ë–ê–í–õ–ï–ù –í–´–ó–û–í –§–£–ù–ö–¶–ò–ò –î–õ–Ø –û–ë–ù–û–í–õ–ï–ù–ò–Ø –ò–ù–§–û–†–ú–ê–¶–ò–ò –û–ë –ò–ì–†–û–ö–ê–• ‚òÖ‚òÖ‚òÖ
    this.updatePlayersInfo();
  }

  // ‚òÖ‚òÖ‚òÖ –ú–ï–¢–û–î–´ –î–õ–Ø –ß–ê–¢–ê –ò –°–ú–ê–ô–õ–ò–ö–û–í ‚òÖ‚òÖ‚òÖ
  setupChatAndSmileys() {
    console.log("üí¨ Setting up chat and smileys...");

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    if (this.sendMessageBtn && this.chatInput) {
      this.sendMessageBtn.addEventListener("click", () => {
        console.log("üñ±Ô∏è Send button clicked");
        const message = this.chatInput.value.trim();
        console.log("üìù Message to send:", message);
        this.sendChatMessage(message, false);
      });

      this.chatInput.addEventListener("keypress", (e) => {
        if (e.key === "Enter") {
          console.log("‚å®Ô∏è Enter key pressed");
          const message = this.chatInput.value.trim();
          console.log("üìù Message to send:", message);
          this.sendChatMessage(message, false);
        }
      });

      console.log("‚úÖ Chat event listeners set up");
    } else {
      console.log("‚ùå Chat elements not found:", {
        sendMessageBtn: !!this.sendMessageBtn,
        chatInput: !!this.chatInput,
      });
    }

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Å–º–∞–π–ª–∏–∫–æ–≤
    if (this.smileyBtns && this.smileyBtns.length > 0) {
      this.smileyBtns.forEach((btn) => {
        btn.addEventListener("click", () => {
          const smiley = btn.getAttribute("data-smiley");
          const soundType = btn.getAttribute("data-sound");
          console.log("üòä Smiley clicked:", smiley, soundType);
          this.sendSmiley(smiley, soundType);
        });
      });
      console.log("‚úÖ Smiley event listeners set up");
    } else {
      console.log("‚ùå Smiley buttons not found");
    }
  }

  // –û—Ç–ø—Ä–∞–≤–∫–∞ –æ–±—ã—á–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
  sendChatMessage(message, isSmiley = false) {
    console.log("üì§ sendChatMessage called with:", { message, isSmiley });

    if (!message) {
      console.log("‚ùå Message is null or undefined");
      return;
    }

    const trimmedMessage = message.trim();
    if (!trimmedMessage) {
      console.log("‚ùå Empty message after trimming, not sending");
      // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≤–∏–∑—É–∞–ª—å–Ω—É—é –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å
      this.chatInput.placeholder = "–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...";
      this.chatInput.focus();
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
    if (!this.ws || this.ws.readyState !== WebSocket.OPEN) {
      console.log("‚ùå WebSocket not connected");
      this.updateStatus("–ù–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º");
      return;
    }

    console.log("üì§ Sending chat message to server:", {
      message: trimmedMessage,
      isSmiley,
      username: this.username,
    });

    // –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
    this.ws.send(
      JSON.stringify({
        type: "chatMessage",
        message: trimmedMessage,
        isSmiley: isSmiley,
        player: this.username,
      })
    );

    this.chatInput.value = "";
    console.log("‚úÖ Chat message sent successfully, input cleared");
  }

  // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–º–∞–π–ª–∏–∫–∞
  sendSmiley(smiley, soundType) {
    console.log(`Sending smiley: ${smiley} with sound: ${soundType}`);

    // –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∑–≤—É–∫–∞ (–∑–∞–≥–ª—É—à–∫–∞ - –¥–æ–±–∞–≤–∏–º –ø–æ–∑–∂–µ —Ñ–∞–π–ª—ã)
    this.playSmileySound(soundType);

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–º–∞–π–ª–∏–∫ –∫–∞–∫ —Å–æ–æ–±—â–µ–Ω–∏–µ
    this.sendChatMessage(smiley, true);
  }

  // –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∑–≤—É–∫–∞ —Å–º–∞–π–ª–∏–∫–∞
  playSmileySound(soundType) {
  try {
    const sound = this.sounds[soundType];
    if (sound) {
      sound.volume = 0.2; // ‚òÖ‚òÖ‚òÖ –ì–†–û–ú–ö–û–°–¢–¨ 30% ‚òÖ‚òÖ‚òÖ
      sound.currentTime = 0;
      sound.play().catch((e) => {
        console.log("Audio play error:", e);
      });
    }
  } catch (error) {
    console.log("Sound play error:", error);
  }
}

  // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç–µ
  displayChatMessage(playerName, message, isSmiley = false, isSystem = false) {
    console.log("üéØ displayChatMessage called with:", {
      playerName,
      message,
      isSmiley,
      isSystem,
    });

    console.log("üí¨ Displaying chat message:", {
      playerName,
      message,
      isSmiley,
      isSystem,
    });

    const messageDiv = document.createElement("div");

    if (isSystem || playerName === "system") {
      messageDiv.className = "chat-message system";
      messageDiv.textContent = message;
      console.log("üîß System message created");
    } else {
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–ª–∞—Å—Å –¥–ª—è —Å—Ç–∏–ª–∏–∑–∞—Ü–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
      const messageClass = playerName === this.username ? "player1" : "player2";
      messageDiv.className = `chat-message ${messageClass}`;

      if (isSmiley) {
        messageDiv.innerHTML = `<strong>${playerName}:</strong> ${message}`;
        console.log("üòä Smiley message created");
      } else {
        messageDiv.textContent = `${playerName}: ${message}`;
        console.log("üìù Regular message created");
      }
    }

    this.chatHistory.appendChild(messageDiv);
    console.log("‚úÖ Message added to chat history");

    // –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é
    this.chatHistory.scrollTop = this.chatHistory.scrollHeight;
    console.log("üìú Scrolled to bottom");

    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 20)
    this.limitChatMessages();
  }

  // –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —á–∞—Ç–µ
  limitChatMessages() {
    if (!this.chatHistory) return;

    const messages = this.chatHistory.querySelectorAll(".chat-message");
    if (messages.length > 20) {
      messages[0].remove();
    }
  }

  // –û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞
  clearChatHistory() {
    if (this.chatHistory) {
      this.chatHistory.innerHTML = "";
      // –î–æ–±–∞–≤–ª—è–µ–º —Å–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
      this.displayChatMessage("", "–ß–∞—Ç –æ—á–∏—â–µ–Ω", false, true);
    }
  }

  // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –∑–≤—É–∫–∞ –ø–æ —Å–º–∞–π–ª–∏–∫—É
  getSoundTypeBySmiley(smiley) {
    const smileyMap = {
      "üòÇ": "laugh",
      "üò¢": "sad",
      "üëç": "cool",
      "üëé": "suck",
      "ü§î": "think",
      "üòè": "smirk",
    };

    return smileyMap[smiley] || null;
  }

  initializeGame() {
    this.createBoard();
    this.updateStatus("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–∏–∫ –¥–ª—è –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã...");
  }

  // ‚òÖ‚òÖ‚òÖ –û–ë–ù–û–í–õ–ï–ù–ù–´–ô –ú–ï–¢–û–î - –ü–†–ê–í–ò–õ–¨–ù–ê–Ø –†–ê–°–°–¢–ê–ù–û–í–ö–ê –ù–ê –ß–ï–†–ù–´–• –ö–õ–ï–¢–ö–ê–• ‚òÖ‚òÖ‚òÖ
  createBoard() {
    const board = document.getElementById("board");
    if (!board) return;

    board.innerHTML = "";

    for (let row = 0; row < 8; row++) {
      for (let col = 0; col < 8; col++) {
        const cell = document.createElement("div");
        cell.className = `cell ${(row + col) % 2 === 0 ? "white" : "black"}`;
        cell.dataset.row = row;
        cell.dataset.col = col;

        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ —Ç–æ–ª—å–∫–æ –Ω–∞ —á–µ—Ä–Ω—ã–µ –∫–ª–µ—Ç–∫–∏
        if ((row + col) % 2 !== 0) {
          cell.addEventListener("click", (e) => {
            e.stopPropagation();
            this.handleCellClick(row, col);
          });
        }

        board.appendChild(cell);
      }
    }

    // –ü–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –¥–æ—Å–∫–∏ - —Ä–∞—Å—Å—Ç–∞–≤–ª—è–µ–º —à–∞—à–∫–∏
    this.initializePieces();
  }

  // ‚òÖ‚òÖ‚òÖ –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –ú–ï–¢–û–î - –ü–†–ê–í–ò–õ–¨–ù–ê–Ø –†–ê–°–°–¢–ê–ù–û–í–ö–ê –®–ê–®–ï–ö ‚òÖ‚òÖ‚òÖ
  initializePieces() {
    console.log("Initializing pieces on board...");

    // –°–Ω–∞—á–∞–ª–∞ –æ—á–∏—â–∞–µ–º –≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —à–∞—à–∫–∏
    this.clearBoard();

    // ‚òÖ‚òÖ‚òÖ –ü–†–ê–í–ò–õ–¨–ù–ê–Ø –†–ê–°–°–¢–ê–ù–û–í–ö–ê - –¢–û–õ–¨–ö–û –ù–ê –ß–ï–†–ù–´–• –ö–õ–ï–¢–ö–ê–• ‚òÖ‚òÖ‚òÖ

    // –ß—ë—Ä–Ω—ã–µ —à–∞—à–∫–∏ (–≤–µ—Ä—Ö–Ω–∏–µ 3 —Ä—è–¥–∞)
    for (let row = 0; row < 3; row++) {
      for (let col = 0; col < 8; col++) {
        if ((row + col) % 2 === 1) {
          // –¢–æ–ª—å–∫–æ —á–µ—Ä–Ω—ã–µ –∫–ª–µ—Ç–∫–∏
          this.placePiece(row, col, "black");
        }
      }
    }

    // –ë–µ–ª—ã–µ —à–∞—à–∫–∏ (–Ω–∏–∂–Ω–∏–µ 3 —Ä—è–¥–∞)
    for (let row = 5; row < 8; row++) {
      for (let col = 0; col < 8; col++) {
        if ((row + col) % 2 === 1) {
          // –¢–æ–ª—å–∫–æ —á–µ—Ä–Ω—ã–µ –∫–ª–µ—Ç–∫–∏
          this.placePiece(row, col, "white");
        }
      }
    }

    console.log("Pieces initialized successfully");
  }

  placePiece(row, col, color, isKing = false) {
    const cell = this.getCell(row, col);
    if (!cell) {
      console.warn(`Cell not found at row:${row}, col:${col}`);
      return;
    }

    // –û—á–∏—â–∞–µ–º –∫–ª–µ—Ç–∫—É –ø–µ—Ä–µ–¥ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ–º —à–∞—à–∫–∏
    const existingPiece = cell.querySelector(".piece");
    if (existingPiece) {
      existingPiece.remove();
    }

    const piece = document.createElement("div");
    piece.className = `piece ${color} ${isKing ? "king" : ""}`;
    piece.dataset.color = color;
    piece.dataset.king = isKing;

    // –°–æ–∑–¥–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —à–∞—à–∫–∏
    const img = document.createElement("img");
    let imageSrc;

    if (color === "white") {
      imageSrc = isKing ? "shabedam.png" : "shabe.png";
    } else {
      imageSrc = isKing ? "shachdam.png" : "shach.png";
    }

    img.src = imageSrc;
    img.alt = isKing ? `${color} –¥–∞–º–∫–∞` : `${color} —à–∞—à–∫–∞`;
    img.style.width = "80%";
    img.style.height = "80%";

    img.onerror = () => {
      console.error(`Failed to load image: ${imageSrc}`);
      // –ó–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç - —Ü–≤–µ—Ç–Ω–æ–π –∫—Ä—É–≥
      piece.style.backgroundColor = color;
      piece.style.border = "2px solid #000";
      piece.style.borderRadius = "50%";
      piece.style.width = "40px";
      piece.style.height = "40px";
      piece.style.display = "flex";
      piece.style.alignItems = "center";
      piece.style.justifyContent = "center";
      if (isKing) {
        piece.innerHTML = "‚ôî";
        piece.style.color = "gold";
        piece.style.fontWeight = "bold";
      }
    };

    piece.appendChild(img);
    cell.appendChild(piece);
  }

  // ‚òÖ‚òÖ‚òÖ –û–ë–ù–û–í–õ–ï–ù–ù–´–ô –ú–ï–¢–û–î –°–ë–†–û–°–ê –ò–ì–†–´ ‚òÖ‚òÖ‚òÖ
  resetGame() {
    console.log("Resetting game to initial state...");

    // ‚òÖ‚òÖ‚òÖ –°–ë–†–ê–°–´–í–ê–ï–ú –°–û–°–¢–û–Ø–ù–ò–ï –ì–û–¢–û–í–ù–û–°–¢–ò ‚òÖ‚òÖ‚òÖ
    this.gameReady = false;

    // ‚òÖ‚òÖ‚òÖ –°–ë–†–ê–°–´–í–ê–ï–ú –°–ß–ï–¢–ß–ò–ö –°–î–ê–ß–ò ‚òÖ‚òÖ‚òÖ
    this.surrenderAttempts = 0;

    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∏–≥—Ä–æ–≤—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
    this.currentPlayer = "white";
    this.selectedPiece = null;
    this.possibleMoves = [];
    // ‚òÖ‚òÖ‚òÖ –ù–ï –°–ë–†–ê–°–´–í–ê–ï–ú playerColor, username –∏ opponentName ‚òÖ‚òÖ‚òÖ
    // this.playerColor = null;
    // this.username = "";
    // this.opponentName = "";
    this.continueCapturePiece = null; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –≤–∑—è—Ç–∏–µ

    // –£–¥–∞–ª—è–µ–º —Å—Ç—Ä–µ–ª–∫—É
    this.removeMoveArrow();

    // –û—á–∏—â–∞–µ–º –¥–æ—Å–∫—É –∏ –ø–µ—Ä–µ—Å–æ–∑–¥–∞—ë–º —Å –Ω–∞—á–∞–ª—å–Ω–æ–π —Ä–∞—Å—Å—Ç–∞–Ω–æ–≤–∫–æ–π
    this.clearBoard();
    this.createBoard();

    // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–≥—Ä–æ–∫–∞–∏ÃÜ
    this.updatePlayersInfo();

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
    this.updateStatus("–ù–æ–≤–∞—è –∏–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å! –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...");
  }

  clearBoard() {
    // –û—á–∏—â–∞–µ–º –≤—Å–µ —à–∞—à–∫–∏ —Å –¥–æ—Å–∫–∏
    document.querySelectorAll(".piece").forEach((piece) => piece.remove());
  }

  // ‚òÖ‚òÖ‚òÖ –û–ë–ù–û–í–õ–ï–ù–ù–´–ô –ú–ï–¢–û–î –î–õ–Ø –û–ë–ù–û–í–õ–ï–ù–ò–Ø –ò–ù–§–û–†–ú–ê–¶–ò–ò –û–ë –ò–ì–†–û–ö–ê–• ‚òÖ‚òÖ‚òÖ
  updatePlayersInfo() {
    const whitePlayer = document.getElementById("whitePlayer");
    const blackPlayer = document.getElementById("blackPlayer");

    if (!whitePlayer || !blackPlayer) return;

    const whiteIndicator = whitePlayer.querySelector(".turn-indicator");
    const blackIndicator = blackPlayer.querySelector(".turn-indicator");

    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
    whitePlayer.classList.remove("active");
    blackPlayer.classList.remove("active");

    // ‚òÖ‚òÖ‚òÖ –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –õ–û–ì–ò–ö–ê –û–¢–û–ë–†–ê–ñ–ï–ù–ò–Ø –ù–ò–ö–û–í ‚òÖ‚òÖ‚òÖ
    const whiteNickname = document.getElementById("whiteNickname");
    const blackNickname = document.getElementById("blackNickname");

    if (whiteNickname && blackNickname) {
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∏–∫ –¥–ª—è –±–µ–ª—ã—Ö
      if (this.playerColor === "white") {
        whiteNickname.textContent = this.username || "–í—ã";
        blackNickname.textContent = this.opponentName || "–û–∂–∏–¥–∞–Ω–∏–µ...";
      }
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∏–∫ –¥–ª—è —á–µ—Ä–Ω—ã—Ö
      else if (this.playerColor === "black") {
        whiteNickname.textContent = this.opponentName || "–û–∂–∏–¥–∞–Ω–∏–µ...";
        blackNickname.textContent = this.username || "–í—ã";
      }
      // –ï—Å–ª–∏ —Ü–≤–µ—Ç –µ—â–µ –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω
      else {
        whiteNickname.textContent = "–û–∂–∏–¥–∞–Ω–∏–µ...";
        blackNickname.textContent = "–û–∂–∏–¥–∞–Ω–∏–µ...";
      }
    }

    // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º —Ç–µ–∫—É—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞
    if (this.currentPlayer === "white") {
      whitePlayer.classList.add("active");
    } else {
      blackPlayer.classList.add("active");
    }

    // ‚òÖ‚òÖ‚òÖ –î–û–ë–ê–í–ò–ú –û–¢–õ–ê–î–û–ß–ù–´–ô –í–´–í–û–î ‚òÖ‚òÖ‚òÖ
    console.log("üîÑ Updated players info:", {
      playerColor: this.playerColor,
      username: this.username,
      opponentName: this.opponentName,
      currentPlayer: this.currentPlayer,
    });
  }

  setupLogin() {
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
    this.loginModal.style.display = "flex";

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã
    this.startGameButton.addEventListener("click", () => {
      this.startGameWithUsername();
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è Enter –≤ –ø–æ–ª–µ –≤–≤–æ–¥–∞
    this.usernameInput.addEventListener("keypress", (e) => {
      if (e.key === "Enter") {
        this.startGameWithUsername();
      }
    });

    // –ê–≤—Ç–æ—Ñ–æ–∫—É—Å –Ω–∞ –ø–æ–ª–µ –≤–≤–æ–¥–∞
    this.usernameInput.focus();
  }

  setupGameControls() {
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ù–æ–≤–∞—è –ò–≥—Ä–∞"
    this.newGameButton.addEventListener("click", () => {
      this.showNewGameModal();
    });

    this.confirmNewGame.addEventListener("click", () => {
      this.confirmNewGameAction();
    });

    this.cancelNewGame.addEventListener("click", () => {
      this.hideNewGameModal();
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ù–∏—á—å—è?"
    this.drawOfferButton.addEventListener("click", () => {
      this.offerDraw();
    });

    this.acceptDraw.addEventListener("click", () => {
      this.acceptDrawOffer();
    });

    this.rejectDraw.addEventListener("click", () => {
      this.rejectDrawOffer();
    });

    // ‚òÖ‚òÖ‚òÖ –î–û–ë–ê–í–õ–ï–ù–´ –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –î–õ–Ø –ö–ù–û–ü–ö–ò "–°–î–ê–¢–¨–°–Ø" ‚òÖ‚òÖ‚òÖ
    this.surrenderButton.addEventListener("click", () => {
      this.offerSurrender();
    });

    this.surrenderFirstConfirm.addEventListener("click", () => {
      this.confirmFirstSurrender();
    });

    this.surrenderFinalConfirm.addEventListener("click", () => {
      this.confirmFinalSurrender();
    });

    this.surrenderCancel.addEventListener("click", () => {
      this.cancelSurrender();
    });

    // ‚òÖ‚òÖ‚òÖ –î–û–ë–ê–í–õ–ï–ù–´ –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –î–õ–Ø –ö–ù–û–ü–û–ö –ù–û–í–û–ô –ò–ì–†–´ ‚òÖ‚òÖ‚òÖ
    this.confirmRestart.addEventListener("click", () => {
      this.acceptNewGame();
    });

    this.declineRestart.addEventListener("click", () => {
      this.rejectNewGame();
    });

    // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ –∏—Ö
    this.newGameModal.addEventListener("click", (e) => {
      if (e.target === this.newGameModal) {
        this.hideNewGameModal();
      }
    });

    this.drawOfferModal.addEventListener("click", (e) => {
      if (e.target === this.drawOfferModal) {
        // –ù–µ –∑–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –Ω–∏—á—å–∏ –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ - –≤—ã–±–æ—Ä –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω
      }
    });

    // ‚òÖ‚òÖ‚òÖ –î–û–ë–ê–í–õ–ï–ù–´ –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –î–õ–Ø –ú–û–î–ê–õ–¨–ù–´–• –û–ö–û–ù –°–î–ê–ß–ò ‚òÖ‚òÖ‚òÖ
    this.surrenderFirstModal.addEventListener("click", (e) => {
      if (e.target === this.surrenderFirstModal) {
        this.hideSurrenderFirstModal();
      }
    });

    this.surrenderSecondModal.addEventListener("click", (e) => {
      if (e.target === this.surrenderSecondModal) {
        this.hideSurrenderSecondModal();
      }
    });

    this.restartModal.addEventListener("click", (e) => {
      if (e.target === this.restartModal) {
        this.hideRestartModal();
      }
    });
  }

  setupRestartModal() {
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —É–∂–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –≤ setupGameControls
  }

  // ‚òÖ‚òÖ‚òÖ –û–ë–ù–û–í–õ–ï–ù–ù–´–ï –ú–ï–¢–û–î–´ –î–õ–Ø –ö–ù–û–ü–ö–ò "–°–î–ê–¢–¨–°–Ø" ‚òÖ‚òÖ‚òÖ
  offerSurrender() {
    console.log(
      "Surrender button clicked. Attempt:",
      this.surrenderAttempts + 1
    );

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
    if (!this.ws || this.ws.readyState !== WebSocket.OPEN) {
      this.updateStatus("–ù–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º");
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–≥—Ä–∞ –∏–¥–µ—Ç
    if (!this.gameReady) {
      this.updateStatus("–ò–≥—Ä–∞ –µ—â–µ –Ω–µ –Ω–∞—á–∞–ª–∞—Å—å");
      return;
    }

    // ‚òÖ‚òÖ‚òÖ –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –õ–û–ì–ò–ö–ê ‚òÖ‚òÖ‚òÖ
    if (this.surrenderAttempts === 0) {
      // –ü–µ—Ä–≤–æ–µ –Ω–∞–∂–∞—Ç–∏–µ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤–æ–µ –æ–∫–Ω–æ
      console.log("First surrender attempt - showing first modal");
      this.showSurrenderFirstModal();
      // –ù–ï —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –∑–¥–µ—Å—å - —É–≤–µ–ª–∏—á–∏–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤ –ø–µ—Ä–≤–æ–º –æ–∫–Ω–µ
    } else if (this.surrenderAttempts === 1) {
      // –í—Ç–æ—Ä–æ–µ –Ω–∞–∂–∞—Ç–∏–µ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Ç–æ—Ä–æ–µ –æ–∫–Ω–æ
      console.log("Second surrender attempt - showing second modal");
      this.showSurrenderSecondModal();
    } else {
      // –¢—Ä–µ—Ç—å–µ –∏ –ø–æ—Å–ª–µ–¥—É—é—â–∏–µ –Ω–∞–∂–∞—Ç–∏—è - —Ç–æ–∂–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Ç–æ—Ä–æ–µ –æ–∫–Ω–æ
      console.log("Subsequent surrender attempt - showing second modal");
      this.showSurrenderSecondModal();
    }
  }

  showSurrenderFirstModal() {
    if (this.surrenderFirstModal) {
      this.surrenderFirstModal.style.display = "flex";
      // –ë–ª–æ–∫–∏—Ä—É–µ–º –∏–≥—Ä–æ–≤–æ–µ –ø–æ–ª–µ –ø–æ–∫–∞ –Ω–µ –±—É–¥–µ—Ç –≤—ã–±—Ä–∞–Ω –æ—Ç–≤–µ—Ç
      this.board.style.pointerEvents = "none";
    }
  }

  hideSurrenderFirstModal() {
    if (this.surrenderFirstModal) {
      this.surrenderFirstModal.style.display = "none";
      this.board.style.pointerEvents = "auto";
    }
  }

  showSurrenderSecondModal() {
    if (this.surrenderSecondModal) {
      this.surrenderSecondModal.style.display = "flex";
      // –ë–ª–æ–∫–∏—Ä—É–µ–º –∏–≥—Ä–æ–≤–æ–µ –ø–æ–ª–µ –ø–æ–∫–∞ –Ω–µ –±—É–¥–µ—Ç –≤—ã–±—Ä–∞–Ω –æ—Ç–≤–µ—Ç
      this.board.style.pointerEvents = "none";
    }
  }

  hideSurrenderSecondModal() {
    if (this.surrenderSecondModal) {
      this.surrenderSecondModal.style.display = "none";
      this.board.style.pointerEvents = "auto";
    }
  }

  confirmFirstSurrender() {
    console.log(
      "First surrender confirmed, increasing counter and closing modal"
    );

    // ‚òÖ‚òÖ‚òÖ –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –õ–û–ì–ò–ö–ê ‚òÖ‚òÖ‚òÖ
    // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –¢–û–õ–¨–ö–û –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤ –ø–µ—Ä–≤–æ–º –æ–∫–Ω–µ
    this.surrenderAttempts = 1;

    // –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø–µ—Ä–≤–æ–µ –æ–∫–Ω–æ
    this.hideSurrenderFirstModal();

    // ‚òÖ‚òÖ‚òÖ –í–ê–ñ–ù–û: –£–ë–ï–î–ò–¢–ï–°–¨ –ß–¢–û –í–¢–û–†–û–ï –û–ö–ù–û –°–ö–†–´–¢–û ‚òÖ‚òÖ‚òÖ
    this.hideSurrenderSecondModal();

    this.updateStatus("–†—É—Å—Å–∫–∏–µ –Ω–µ —Å–¥–∞—é—Ç—Å—è! üí™");
  }

  confirmFinalSurrender() {
    console.log("Final surrender confirmed, sending surrender to server");

    if (this.ws && this.ws.readyState === WebSocket.OPEN) {
      this.ws.send(
        JSON.stringify({
          type: "surrender",
        })
      );
      this.updateStatus("–í—ã —Å–¥–∞–ª–∏—Å—å. –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è...");
    }

    this.hideSurrenderSecondModal();
  }

  cancelSurrender() {
    console.log("Final surrender cancelled");
    this.hideSurrenderSecondModal();
    this.updateStatus("–ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–æ–π! üí™");
  }

  // ‚òÖ‚òÖ‚òÖ –û–ë–ù–û–í–õ–ï–ù–ù–´–ï –ú–ï–¢–û–î–´ –î–õ–Ø –ù–û–í–û–ô –ò–ì–†–´ ‚òÖ‚òÖ‚òÖ
  showNewGameModal() {
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
    if (this.newGameModalTitle && this.newGameModalMessage) {
      this.newGameModalTitle.textContent = "–ù–æ–≤–∞—è –ò–≥—Ä–∞";
      this.newGameModalMessage.textContent =
        "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –Ω–∞—á–∞—Ç—å –ù–æ–≤—É—é –ò–≥—Ä—É?";
    }

    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
    this.confirmNewGame.textContent = "–î–∞";
    this.confirmNewGame.onclick = () => this.confirmNewGameAction();
    this.cancelNewGame.textContent = "–ù–µ—Ç";
    this.cancelNewGame.style.display = "block";

    this.newGameModal.style.display = "flex";
  }

  hideNewGameModal() {
    this.newGameModal.style.display = "none";
  }

  confirmNewGameAction() {
    console.log("Confirming new game...");

    // ‚òÖ‚òÖ‚òÖ –î–û–ë–ê–í–ò–ú –ü–†–û–í–ï–†–ö–£ –°–û–ï–î–ò–ù–ï–ù–ò–Ø ‚òÖ‚òÖ‚òÖ
    if (!this.ws) {
      console.error("‚ùå WebSocket not initialized");
      this.updateStatus("–û—à–∏–±–∫–∞: —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ");
      return;
    }

    if (this.ws.readyState !== WebSocket.OPEN) {
      console.error("‚ùå WebSocket not open, state:", this.ws.readyState);
      this.updateStatus("–ù–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º");
      return;
    }

    // ‚òÖ‚òÖ‚òÖ –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê: –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –Ω–æ–≤—É—é –∏–≥—Ä—É –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫—É ‚òÖ‚òÖ‚òÖ
    console.log("üì§ Sending newGameRequest to server...");
    this.ws.send(
      JSON.stringify({
        type: "newGameRequest",
        from: this.username,
      })
    );

    // ‚òÖ‚òÖ‚òÖ –ü–û–ö–ê–ó–´–í–ê–ï–ú –û–ö–ù–û –û–ñ–ò–î–ê–ù–ò–Ø ‚òÖ‚òÖ‚òÖ
    this.showNewGameWaiting();
    this.updateStatus("–ó–∞–ø—Ä–æ—Å –Ω–∞ –Ω–æ–≤—É—é –∏–≥—Ä—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫—É...");

    this.hideNewGameModal();
  }

  // ‚òÖ‚òÖ‚òÖ –ú–ï–¢–û–î –î–õ–Ø –ü–û–ö–ê–ó–ê –û–ñ–ò–î–ê–ù–ò–Ø –û–¢–í–ï–¢–ê ‚òÖ‚òÖ‚òÖ
  showNewGameWaiting() {
    if (this.newGameModalTitle && this.newGameModalMessage) {
      this.newGameModalTitle.textContent = "–û–∂–∏–¥–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞";
      this.newGameModalMessage.textContent =
        "–ó–∞–ø—Ä–æ—Å –Ω–∞ –Ω–æ–≤—É—é –∏–≥—Ä—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω. –û–∂–∏–¥–∞–µ–º –æ—Ç–≤–µ—Ç–∞ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞...";

      // –ú–µ–Ω—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Ä–µ–∂–∏–º–∞ –æ–∂–∏–¥–∞–Ω–∏—è
      this.confirmNewGame.textContent = "–û—Ç–º–µ–Ω–∞";
      this.confirmNewGame.onclick = () => this.cancelNewGameWaiting();
      this.cancelNewGame.style.display = "none"; // –°–∫—Ä—ã–≤–∞–µ–º –≤—Ç–æ—Ä—É—é –∫–Ω–æ–ø–∫—É

      this.newGameModal.style.display = "flex";
    }
  }

  // ‚òÖ‚òÖ‚òÖ –ú–ï–¢–û–î –î–õ–Ø –û–¢–ú–ï–ù–´ –û–ñ–ò–î–ê–ù–ò–Ø ‚òÖ‚òÖ‚òÖ
  cancelNewGameWaiting() {
    this.hideNewGameModal();
    this.updateStatus("–û–∂–∏–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∏–≥—Ä—ã –æ—Ç–º–µ–Ω–µ–Ω–æ");
  }

  // ‚òÖ‚òÖ‚òÖ –ú–ï–¢–û–î –î–õ–Ø –ü–û–ö–ê–ó–ê –ó–ê–ü–†–û–°–ê –ù–û–í–û–ô –ò–ì–†–´ –û–¢ –ü–†–û–¢–ò–í–ù–ò–ö–ê ‚òÖ‚òÖ‚òÖ
  showNewGameRequestModal(opponentName) {
    // ‚òÖ‚òÖ‚òÖ –í–ê–ñ–ù–û: –ò–°–ü–û–õ–¨–ó–£–ï–ú restartModal –î–õ–Ø –ó–ê–ü–†–û–°–û–í –ù–û–í–û–ô –ò–ì–†–´ ‚òÖ‚òÖ‚òÖ
    if (this.restartModal && this.restartMessage) {
      this.restartMessage.textContent = `${opponentName} –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –Ω–∞—á–∞—Ç—å –Ω–æ–≤—É—é –∏–≥—Ä—É. –°–æ–≥–ª–∞—Å–Ω—ã?`;
      this.restartModal.style.display = "flex";

      // –ë–ª–æ–∫–∏—Ä—É–µ–º –∏–≥—Ä–æ–≤–æ–µ –ø–æ–ª–µ –ø–æ–∫–∞ –Ω–µ –±—É–¥–µ—Ç –≤—ã–±—Ä–∞–Ω –æ—Ç–≤–µ—Ç
      this.board.style.pointerEvents = "none";
    }
    console.log("üîÑ New game request modal shown for:", opponentName);
  }

  hideRestartModal() {
    if (this.restartModal) {
      this.restartModal.style.display = "none";
      this.board.style.pointerEvents = "auto";
    }
  }

  // ‚òÖ‚òÖ‚òÖ –ú–ï–¢–û–î–´ –î–õ–Ø –ü–†–ò–ù–Ø–¢–ò–Ø/–û–¢–ö–õ–û–ù–ï–ù–ò–Ø –ù–û–í–û–ô –ò–ì–†–´ ‚òÖ‚òÖ‚òÖ
  acceptNewGame() {
    if (this.ws && this.ws.readyState === WebSocket.OPEN) {
      this.ws.send(
        JSON.stringify({
          type: "newGameResponse",
          accepted: true,
        })
      );
    }
    this.hideRestartModal();
    // –ò–≥—Ä–∞ –Ω–∞—á–Ω–µ—Ç—Å—è –∫–æ–≥–¥–∞ —Å–µ—Ä–≤–µ—Ä –ø—Ä–∏—à–ª–µ—Ç gameRestarted
  }

  rejectNewGame() {
    if (this.ws && this.ws.readyState === WebSocket.OPEN) {
      this.ws.send(
        JSON.stringify({
          type: "newGameResponse",
          accepted: false,
        })
      );
    }
    this.hideRestartModal();
    this.updateStatus("–í—ã –æ—Ç–∫–ª–æ–Ω–∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∏–≥—Ä—ã");
  }

  // ‚òÖ‚òÖ‚òÖ –ú–ï–¢–û–î –î–õ–Ø –ü–û–õ–ù–û–ì–û –°–ë–†–û–°–ê –ò–ì–†–´ ‚òÖ‚òÖ‚òÖ
  startFreshGame() {
    console.log("üîÑ Starting fresh game...");

    // ‚òÖ‚òÖ‚òÖ –ü–û–õ–ù–´–ô –°–ë–†–û–° –ò–ì–†–´ ‚òÖ‚òÖ‚òÖ
    this.surrenderAttempts = 0;
    this.currentPlayer = "white";
    this.selectedPiece = null;
    this.possibleMoves = [];
    this.continueCapturePiece = null;
    // ‚òÖ‚òÖ‚òÖ –ù–ï –°–ë–†–ê–°–´–í–ê–ï–ú opponentName! ‚òÖ‚òÖ‚òÖ
    // this.opponentName = ""; // ‚òÖ‚òÖ‚òÖ –£–ë–†–ê–¢–¨ –≠–¢–£ –°–¢–†–û–ö–£ ‚òÖ‚òÖ‚òÖ

    // ‚òÖ‚òÖ‚òÖ –ù–ï –°–ë–†–ê–°–´–í–ê–ï–ú playerColor –∏ username ‚òÖ‚òÖ‚òÖ

    // –£–¥–∞–ª—è–µ–º —Å—Ç—Ä–µ–ª–∫—É
    this.removeMoveArrow();

    // –û—á–∏—â–∞–µ–º –¥–æ—Å–∫—É –∏ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º —Å –Ω–∞—á–∞–ª—å–Ω–æ–π —Ä–∞—Å—Å—Ç–∞–Ω–æ–≤–∫–æ–π
    this.clearBoard();
    this.createBoard();

    // ‚òÖ‚òÖ‚òÖ –û–ß–ò–©–ê–ï–ú –ß–ê–¢ –ü–†–ò –ù–û–í–û–ô –ò–ì–†–ï ‚òÖ‚òÖ‚òÖ
    this.clearChatHistory();

    // ‚òÖ‚òÖ‚òÖ –í–ê–ñ–ù–û: –ü–û–ö–ê–ó–´–í–ê–ï–ú –ö–ù–û–ü–ö–ò –£–ü–†–ê–í–õ–ï–ù–ò–Ø ‚òÖ‚òÖ‚òÖ
    if (this.gameControls) {
      this.gameControls.style.display = "flex";
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–≥—Ä–æ–∫–∞—Ö
    this.updatePlayersInfo();

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
    this.updateStatus("–ù–æ–≤–∞—è –∏–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å! –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...");

    // –°–∫—Ä—ã–≤–∞–µ–º –æ–∫–Ω–æ –æ–∂–∏–¥–∞–Ω–∏—è –µ—Å–ª–∏ –æ–Ω–æ –æ—Ç–∫—Ä—ã—Ç–æ
    this.hideNewGameModal();

    // ‚òÖ‚òÖ‚òÖ –°–ö–†–´–í–ê–ï–ú –ú–û–î–ê–õ–¨–ù–û–ï –û–ö–ù–û –û–ö–û–ù–ß–ê–ù–ò–Ø –ò–ì–†–´ ‚òÖ‚òÖ‚òÖ
    this.hideGameOverModal();

    console.log("‚úÖ Fresh game started, opponent:", this.opponentName);
  }

  // ‚òÖ‚òÖ‚òÖ –î–û–ë–ê–í–õ–ï–ù –ú–ï–¢–û–î –î–õ–Ø –°–ö–†–´–¢–ò–Ø –ú–û–î–ê–õ–¨–ù–û–ì–û –û–ö–ù–ê ‚òÖ‚òÖ‚òÖ
  hideGameOverModal() {
    const modal = document.getElementById("gameOverModal");
    if (modal) {
      modal.style.display = "none";
    }

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–Ω–æ–≤–∞
    if (this.gameControls) {
      this.gameControls.style.display = "flex";
    }
  }

  offerDraw() {
    if (!this.ws || this.ws.readyState !== WebSocket.OPEN) {
      this.updateStatus("–ù–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º");
      return;
    }

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –Ω–∏—á—å–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
    this.ws.send(
      JSON.stringify({
        type: "drawOffer",
        from: this.username,
      })
    );

    this.updateStatus("–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –Ω–∏—á—å–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ...");
  }

  showDrawOfferModal(opponentName) {
    this.drawOfferText.textContent = `${opponentName} –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –Ω–∏—á—å—é`;
    this.drawOfferModal.style.display = "flex";

    // –ë–ª–æ–∫–∏—Ä—É–µ–º –∏–≥—Ä–æ–≤–æ–µ –ø–æ–ª–µ –ø–æ–∫–∞ –Ω–µ –±—É–¥–µ—Ç –≤—ã–±—Ä–∞–Ω –æ—Ç–≤–µ—Ç
    this.board.style.pointerEvents = "none";
  }

  hideDrawOfferModal() {
    this.drawOfferModal.style.display = "none";
    this.board.style.pointerEvents = "auto";
  }

  acceptDrawOffer() {
    if (!this.ws || this.ws.readyState !== WebSocket.OPEN) {
      this.updateStatus("–ù–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º");
      return;
    }

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –Ω–∏—á—å—é
    this.ws.send(
      JSON.stringify({
        type: "drawResponse",
        accepted: true,
      })
    );

    this.hideDrawOfferModal();
  }

  rejectDrawOffer() {
    if (!this.ws || this.ws.readyState !== WebSocket.OPEN) {
      this.updateStatus("–ù–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º");
      return;
    }

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–∫–∞–∑ –æ—Ç –Ω–∏—á—å–∏
    this.ws.send(
      JSON.stringify({
        type: "drawResponse",
        accepted: false,
      })
    );

    this.hideDrawOfferModal();
    this.updateStatus("–í—ã –æ—Ç–∫–ª–æ–Ω–∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –Ω–∏—á—å–∏");
  }

  startGameWithUsername() {
    const username = this.usernameInput.value.trim();

    if (username.length < 2) {
      alert("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∏–∫ –¥–ª–∏–Ω–æ–π –æ—Ç 2 —Å–∏–º–≤–æ–ª–æ–≤");
      this.usernameInput.focus();
      return;
    }

    if (username.length > 15) {
      alert("–ù–∏–∫ –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å 15 —Å–∏–º–≤–æ–ª–æ–≤");
      this.usernameInput.focus();
      return;
    }

    this.username = username;
    this.loginModal.style.display = "none";

    // ‚òÖ‚òÖ‚òÖ –û–ë–ù–û–í–õ–Ø–ï–ú –ò–ù–§–û–†–ú–ê–¶–ò–Æ –û–ë –ò–ì–†–û–ö–ê–• –ü–û–°–õ–ï –£–°–¢–ê–ù–û–í–ö–ò –ù–ò–ö–ê ‚òÖ‚òÖ‚òÖ
    this.updatePlayersInfo();

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Å –Ω–∏–∫–æ–º
    this.updateStatus(
      `–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, ${username}! –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É...`
    );

    // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ WebSocket
    this.setupWebSocket();
  }

  // ‚òÖ‚òÖ‚òÖ –û–ë–ù–û–í–õ–ï–ù–ù–´–ô –ú–ï–¢–û–î –û–ë–†–ê–ë–û–¢–ö–ò –ö–õ–ò–ö–û–í –° –ü–†–û–í–ï–†–ö–û–ô –ì–û–¢–û–í–ù–û–°–¢–ò –ò–ì–†–´ ‚òÖ‚òÖ‚òÖ
  handleCellClick(row, col) {
    console.log("Cell clicked:", row, col, "Game ready:", this.gameReady);

    // ‚òÖ‚òÖ‚òÖ –ü–ï–†–í–ê–Ø –ü–†–û–í–ï–†–ö–ê: –ò–ì–†–ê –î–û–õ–ñ–ù–ê –ë–´–¢–¨ –ì–û–¢–û–í–ê ‚òÖ‚òÖ‚òÖ
    if (!this.gameReady) {
      this.updateStatus("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –≤—Ç–æ—Ä–æ–≥–æ –∏–≥—Ä–æ–∫–∞...");
      return;
    }

    if (!this.playerColor) {
      this.updateStatus("–û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...");
      return;
    }

    if (this.playerColor !== this.currentPlayer) {
      this.updateStatus("–°–µ–π—á–∞—Å –Ω–µ –≤–∞—à —Ö–æ–¥!");
      return;
    }

    const cell = this.getCell(row, col);
    const piece = cell.querySelector(".piece");

    // ‚òÖ‚òÖ‚òÖ –ï–°–õ–ò –ê–ö–¢–ò–í–ù–û –ú–ù–û–ñ–ï–°–¢–í–ï–ù–ù–û–ï –í–ó–Ø–¢–ò–ï - –û–ë–†–ê–ë–ê–¢–´–í–ê–ï–ú –û–°–û–ë–´–ú –û–ë–†–ê–ó–û–ú ‚òÖ‚òÖ‚òÖ
    if (this.continueCapturePiece) {
      const continueRow = this.continueCapturePiece.row;
      const continueCol = this.continueCapturePiece.col;

      // –ï—Å–ª–∏ –∫–ª–∏–∫–Ω—É–ª–∏ –Ω–∞ —Ç—É –∂–µ —à–∞—à–∫—É - —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—ã–±–æ—Ä
      if (continueRow === row && continueCol === col) {
        this.continueCapturePiece = null;
        this.clearSelection();
        this.updateStatus("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –≤–∑—è—Ç–∏—è");
        return;
      }

      // –ü—Ä–æ–±—É–µ–º —Å–¥–µ–ª–∞—Ç—å —Ö–æ–¥ –∏–∑ –ø–æ–∑–∏—Ü–∏–∏ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º–æ–≥–æ –≤–∑—è—Ç–∏—è
      this.makeMove(continueRow, continueCol, row, col);
      this.clearSelection();
      return;
    }

    // –ï—Å–ª–∏ —É–∂–µ –≤—ã–±—Ä–∞–Ω–∞ —à–∞—à–∫–∞ - –ø—Ä–æ–±—É–µ–º —Å–¥–µ–ª–∞—Ç—å —Ö–æ–¥
    if (this.selectedPiece) {
      this.makeMove(this.selectedPiece.row, this.selectedPiece.col, row, col);
      this.clearSelection();
    }
    // –ï—Å–ª–∏ –∫–ª–∏–∫–Ω—É–ª–∏ –Ω–∞ —Å–≤–æ—é —à–∞—à–∫—É - –≤—ã–±–∏—Ä–∞–µ–º –µ—ë
    else if (piece && piece.dataset.color === this.playerColor) {
      this.selectedPiece = { row, col };
      this.highlightCell(row, col, "selected");
      this.updateStatus("–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–µ—Ç–∫—É –¥–ª—è —Ö–æ–¥–∞");
    }
  }

  makeMove(fromRow, fromCol, toRow, toCol) {
    if (!this.ws || this.ws.readyState !== WebSocket.OPEN) {
      this.updateStatus("–ù–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º");
      return;
    }

    const moveData = {
      fromRow: fromRow,
      fromCol: fromCol,
      toRow: toRow,
      toCol: toCol,
    };

    console.log("Sending move:", moveData);
    this.ws.send(
      JSON.stringify({
        type: "move",
        data: moveData,
      })
    );

    this.updateStatus("–•–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è...");
  }

  setupWebSocket() {
    const protocol = window.location.protocol === "https:" ? "wss:" : "ws:";
    const wsUrl = `${protocol}//${window.location.host}`;

    console.log("Connecting to WebSocket:", wsUrl);

    try {
      this.ws = new WebSocket(wsUrl);

      this.ws.onopen = () => {
        console.log("‚úÖ WebSocket connected successfully");
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∏–∫ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏
        this.ws.send(
          JSON.stringify({
            type: "join",
            username: this.username,
          })
        );
        this.updateStatus("–ü–æ–¥–∫–ª—é—á–µ–Ω–æ! –û–∂–∏–¥–∞–Ω–∏–µ –≤—Ç–æ—Ä–æ–≥–æ –∏–≥—Ä–æ–∫–∞...");
      };

      this.ws.onmessage = (event) => {
        try {
          const message = JSON.parse(event.data);
          console.log("üì® Received message:", message);
          this.handleServerMessage(message);
        } catch (error) {
          console.error("‚ùå Error parsing message:", error);
        }
      };

      this.ws.onclose = (event) => {
        console.log("üîå WebSocket disconnected:", event.code, event.reason);
        this.updateStatus(
          "–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø–æ—Ç–µ—Ä—è–Ω–æ. –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã..."
        );
        setTimeout(() => {
          this.setupWebSocket();
        }, 3000);
      };

      this.ws.onerror = (error) => {
        console.error("üí• WebSocket error:", error);
        this.updateStatus("–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º");
      };
    } catch (error) {
      console.error("üí• Failed to create WebSocket:", error);
      this.updateStatus("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è");
    }
  }

  handleServerMessage(message) {
    console.log("üì® Received message type:", message.type, "Data:", message);

    switch (message.type) {
      // ‚òÖ‚òÖ‚òÖ –î–û–ë–ê–í–õ–ï–ù–û: –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∏–≥—Ä—ã ‚òÖ‚òÖ‚òÖ
      case "gameReady":
        console.log("‚úÖ Game is ready to play!");
        this.gameReady = true;
        this.updateStatus("‚úÖ –û–±–∞ –∏–≥—Ä–æ–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã! –í–∞—à —Ö–æ–¥!");

        // ‚òÖ‚òÖ‚òÖ –î–û–ë–ê–í–õ–Ø–ï–ú –°–û–û–ë–©–ï–ù–ò–ï –í –ß–ê–¢ ‚òÖ‚òÖ‚òÖ
        this.displayChatMessage("", "–ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å! –£–¥–∞—á–∏!", false, true);
        break;

      case "playerDisconnected":
        this.gameReady = false;
        this.updateStatus(message.message);
        break;

      case "playerAssigned":
        this.playerColor = message.color;
        const colorText = this.playerColor === "white" ? "–±–µ–ª—ã–µ" : "—á—ë—Ä–Ω—ã–µ";
        this.updateStatus(
          `–í—ã –∏–≥—Ä–∞–µ—Ç–µ –∑–∞ ${colorText}. –û–∂–∏–¥–∞–Ω–∏–µ –≤—Ç–æ—Ä–æ–≥–æ –∏–≥—Ä–æ–∫–∞...`
        );
        this.updatePlayersInfo();
        break;

      case "gameState":
        this.updateGameState(message.data);
        break;

      case "moveResult":
        if (message.valid) {
          this.updateGameState(message.gameState);

          // ‚òÖ‚òÖ‚òÖ –û–ë–†–ê–ë–û–¢–ö–ê –ú–ù–û–ñ–ï–°–¢–í–ï–ù–ù–û–ì–û –í–ó–Ø–¢–ò–Ø ‚òÖ‚òÖ‚òÖ
          if (message.canContinue) {
            this.continueCapturePiece = {
              row: message.gameState.continueCapture?.position?.row,
              col: message.gameState.continueCapture?.position?.col,
            };
            this.updateStatus(
              "–ú–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –≤–∑—è—Ç–∏–µ! –í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â—É—é —à–∞—à–∫—É –¥–ª—è –≤–∑—è—Ç–∏—è."
            );
          } else {
            this.continueCapturePiece = null; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –≤–∑—è—Ç–∏–µ
          }
        } else {
          this.updateStatus(`‚ùå ${message.message}`);
        }
        break;

      // ‚òÖ‚òÖ‚òÖ –î–û–ë–ê–í–õ–ï–ù –û–ë–†–ê–ë–û–¢–ß–ò–ö –î–õ–Ø –ü–†–û–î–û–õ–ñ–ï–ù–ò–Ø –í–ó–Ø–¢–ò–Ø ‚òÖ‚òÖ‚òÖ
      case "canContinueCapture":
        this.continueCapturePiece = {
          row: message.position.row,
          col: message.position.col,
        };
        this.updateStatus(
          "–ú–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –≤–∑—è—Ç–∏–µ! –í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â—É—é —à–∞—à–∫—É –¥–ª—è –≤–∑—è—Ç–∏—è."
        );
        break;

      case "moveMade":
        this.handleMoveMade(message.data);
        break;

      case "playersInfo":
        this.handlePlayersInfo(message.data);
        break;

      case "drawOfferReceived":
        this.showDrawOfferModal(message.from);
        break;

      case "drawRejected":
        this.updateStatus(`${message.by} –æ—Ç–∫–ª–æ–Ω–∏–ª –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –Ω–∏—á—å–∏`);
        break;

      // ‚òÖ‚òÖ‚òÖ –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –ö–û–î - –ó–ê–ú–ï–ù–ò–¢–ï –°–¢–ê–†–´–ô –ë–õ–û–ö ‚òÖ‚òÖ‚òÖ
      case "chatMessage":
        console.log("üí¨ Received chat message:", message);
        this.displayChatMessage(
          message.player,
          message.message,
          message.isSmiley,
          message.player === "system"
        );

        // –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º –∑–≤—É–∫ –µ—Å–ª–∏ —ç—Ç–æ —Å–º–∞–π–ª–∏–∫ –æ—Ç –¥—Ä—É–≥–æ–≥–æ –∏–≥—Ä–æ–∫–∞
        if (message.isSmiley && message.player !== this.username) {
          const soundType = this.getSoundTypeBySmiley(message.message);
          if (soundType) {
            console.log("üîä Playing smiley sound:", soundType);
            this.playSmileySound(soundType);
          }
        }
        break; // ‚òÖ‚òÖ‚òÖ –í–ê–ñ–ù–û: break –î–û–õ–ñ–ï–ù –ë–´–¢–¨ –ó–î–ï–°–¨ ‚òÖ‚òÖ‚òÖ

      case "chatHistory":
        if (message.messages && Array.isArray(message.messages)) {
          if (this.chatHistory) {
            this.chatHistory.innerHTML = "";
          }
          message.messages.forEach((msg) => {
            this.displayChatMessage(
              msg.player,
              msg.message,
              msg.isSmiley,
              msg.player === "system"
            );
          });
        }
        break;

      // ‚òÖ‚òÖ‚òÖ –û–ë–†–ê–ë–û–¢–ö–ê –ù–û–í–´–• –°–û–û–ë–©–ï–ù–ò–ô –î–õ–Ø –ù–û–í–û–ô –ò–ì–†–´ ‚òÖ‚òÖ‚òÖ
      case "newGameRequest":
        this.showNewGameRequestModal(message.from);
        break;

      case "newGameAccepted":
        this.hideNewGameModal();
        this.updateStatus("–ü—Ä–æ—Ç–∏–≤–Ω–∏–∫ –ø—Ä–∏–Ω—è–ª –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∏–≥—Ä—ã");
        break;

      case "newGameRejected":
        this.hideNewGameModal();
        this.updateStatus("–ü—Ä–æ—Ç–∏–≤–Ω–∏–∫ –æ—Ç–∫–ª–æ–Ω–∏–ª –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∏–≥—Ä—ã");
        break;

      case "gameOver":
        if (message.result === "draw") {
          this.handleGameOver({ winner: null, result: "draw" });
        } else {
          // ‚òÖ‚òÖ‚òÖ –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –û–ë–†–ê–ë–û–¢–ö–ê –°–î–ê–ß–ò ‚òÖ‚òÖ‚òÖ
          if (message.result === "surrender") {
            const winner = message.winner;
            const surrenderedBy = message.surrenderedBy;
            const surrenderedByColor = message.surrenderedByColor;

            const winnerName =
              winner === this.playerColor ? this.username : this.opponentName;
            const loserName =
              surrenderedByColor === this.playerColor
                ? this.username
                : this.opponentName;
            const colorText =
              surrenderedByColor === "white" ? "–±–µ–ª—ã–µ" : "—á—ë—Ä–Ω—ã–µ";

            this.updateStatus(
              `üèÜ ${winnerName} –ü–æ–±–µ–¥–∏—Ç–µ–ª—å! ${loserName} (${colorText}) —Å–¥–∞–ª—Å—è`
            );

            this.handleGameOver({
              winner: winner,
              result: "win",
              surrender: true,
              surrenderedPlayer: surrenderedByColor,
              message: `üèÜ ${winnerName} –ü–æ–±–µ–¥–∏—Ç–µ–ª—å! ${loserName} (${colorText}) —Å–¥–∞–ª—Å—è`,
            });
          } else {
            this.handleGameOver(message);
          }
        }
        break;

      case "gameRestarted":
        console.log("üîÑ Game restarted message received");
        this.startFreshGame();
        this.updateStatus("–ù–æ–≤–∞—è –∏–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å!");
        break;

      case "restartRejected":
        this.updateStatus("–ü—Ä–æ—Ç–∏–≤–Ω–∏–∫ –æ—Ç–∫–ª–æ–Ω–∏–ª –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∏–≥—Ä—ã");
        break;

      case "error":
        this.updateStatus(`‚ö†Ô∏è ${message.message}`);
        break;

      default:
        console.log("Unknown message type:", message.type);
    }
  }

  handlePlayersInfo(players) {
    console.log("Players info:", players);

    // ‚òÖ‚òÖ‚òÖ –£–õ–£–ß–®–ï–ù–ù–ê–Ø –õ–û–ì–ò–ö–ê –°–û–•–†–ê–ù–ï–ù–ò–Ø –ù–ò–ö–ê –ü–†–û–¢–ò–í–ù–ò–ö–ê ‚òÖ‚òÖ‚òÖ
    const opponent = players.find((p) => p.username !== this.username);
    if (opponent) {
      const oldOpponentName = this.opponentName;
      this.opponentName = opponent.username;

      // ‚òÖ‚òÖ‚òÖ –î–û–ë–ê–í–õ–Ø–ï–ú –°–û–û–ë–©–ï–ù–ò–ï –í –ß–ê–¢ –ü–†–ò –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ò –ü–†–û–¢–ò–í–ù–ò–ö–ê ‚òÖ‚òÖ‚òÖ
      if (!oldOpponentName && this.opponentName) {
        this.displayChatMessage(
          "",
          `–ò–≥—Ä–æ–∫ ${this.opponentName} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –∏–≥—Ä–µ`,
          false,
          true
        );
      }

      console.log(`Playing against: ${this.opponentName} (${opponent.color})`);
    } else if (players.length === 1) {
      // –ï—Å–ª–∏ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –∏–≥—Ä–æ–∫ (–º—ã —Å–∞–º–∏), —Å–±—Ä–∞—Å—ã–≤–∞–µ–º opponentName
      this.opponentName = "";
    }

    // ‚òÖ‚òÖ‚òÖ –û–ë–ù–û–í–õ–Ø–ï–ú –ò–ù–§–û–†–ú–ê–¶–ò–Æ –û–ë –ò–ì–†–û–ö–ê–• –î–õ–Ø –í–°–ï–• –°–õ–£–ß–ê–ï–í ‚òÖ‚òÖ‚òÖ
    this.updatePlayersInfo();

    console.log("Current opponent name:", this.opponentName);
  }

  setupRestartButton() {
    this.restartButton.addEventListener("click", () => {
      this.restartGame();
    });
  }

  // ‚òÖ‚òÖ‚òÖ –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –ú–ï–¢–û–î restartGame ‚òÖ‚òÖ‚òÖ
  restartGame() {
    console.log("Restarting game via restart button");

    // ‚òÖ‚òÖ‚òÖ –ü–†–û–°–¢–û –í–´–ó–´–í–ê–ï–ú startFreshGame ‚òÖ‚òÖ‚òÖ
    this.startFreshGame();

    // –£–¥–∞–ª—è–µ–º —Å—Ç—Ä–µ–ª–∫—É –∏ –æ—á–∏—â–∞–µ–º —Ç–∞–π–º–µ—Ä
    this.removeMoveArrow();

    // –°–∫—Ä—ã–≤–∞–µ–º –±–ª–æ–∫ —Ä–µ—Å—Ç–∞—Ä—Ç–∞
    this.restartContainer.style.display = "none";

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ—Å–∫—É –∏ —Å—Ç–∞—Ç—É—Å
    this.board.style.display = "grid";
    this.status.style.display = "block";
  }

  createMoveArrow(fromRow, fromCol, toRow, toCol) {
    // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é —Å—Ç—Ä–µ–ª–∫—É, –µ—Å–ª–∏ –µ—Å—Ç—å
    this.removeMoveArrow();

    const fromCell = this.getCell(fromRow, fromCol);
    const toCell = this.getCell(toRow, toCol);

    if (!fromCell || !toCell) return;

    // –ü–æ–ª—É—á–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Ü–µ–Ω—Ç—Ä–æ–≤ –∫–ª–µ—Ç–æ–∫
    const fromRect = fromCell.getBoundingClientRect();
    const toRect = toCell.getBoundingClientRect();
    const boardRect = this.board.getBoundingClientRect();

    // –í—ã—á–∏—Å–ª—è–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –¥–æ—Å–∫–∏
    const fromX = fromRect.left + fromRect.width / 2 - boardRect.left;
    const fromY = fromRect.top + fromRect.height / 2 - boardRect.top;
    const toX = toRect.left + toRect.width / 2 - boardRect.left;
    const toY = toRect.top + toRect.height / 2 - boardRect.top;

    // –°–æ–∑–¥–∞–µ–º SVG —ç–ª–µ–º–µ–Ω—Ç –¥–ª—è —Å—Ç—Ä–µ–ª–∫–∏
    const svg = document.createElementNS("http://www.w3.org/2000/svg", "svg");
    svg.classList.add("move-arrow");
    svg.setAttribute("width", "100%");
    svg.setAttribute("height", "100%");
    svg.style.position = "absolute";
    svg.style.top = "0";
    svg.style.left = "0";
    svg.style.pointerEvents = "none";

    // –í—ã—á–∏—Å–ª—è–µ–º –¥–ª–∏–Ω—É –∏ —É–≥–æ–ª —Å—Ç—Ä–µ–ª–∫–∏
    const dx = toX - fromX;
    const dy = toY - fromY;
    const length = Math.sqrt(dx * dx + dy * dy);
    const angle = (Math.atan2(dy, dx) * 180) / Math.PI;

    // –£–∫–æ—Ä–∞—á–∏–≤–∞–µ–º —Å—Ç—Ä–µ–ª–∫—É, —á—Ç–æ–±—ã –æ–Ω–∞ –Ω–µ –∑–∞—Ö–æ–¥–∏–ª–∞ –Ω–∞ —à–∞—à–∫–∏
    const shortenBy = 25;
    const shortenedLength = length - shortenBy * 2;
    const shortenX = (dx / length) * shortenBy;
    const shortenY = (dy / length) * shortenBy;

    const adjustedFromX = fromX + shortenX;
    const adjustedFromY = fromY + shortenY;
    const adjustedToX = toX - shortenX;
    const adjustedToY = toY - shortenY;

    // –°–æ–∑–¥–∞–µ–º –ª–∏–Ω–∏—é —Å—Ç—Ä–µ–ª–∫–∏
    const line = document.createElementNS("http://www.w3.org/2000/svg", "line");
    line.classList.add("arrow-line", "arrow-animation");
    line.setAttribute("x1", adjustedFromX);
    line.setAttribute("y1", adjustedFromY);
    line.setAttribute("x2", adjustedToX);
    line.setAttribute("y2", adjustedToY);

    // –°–æ–∑–¥–∞–µ–º –Ω–∞–∫–æ–Ω–µ—á–Ω–∏–∫ —Å—Ç—Ä–µ–ª–∫–∏
    const headLength = 15;
    const headAngle = 30;

    const head = document.createElementNS(
      "http://www.w3.org/2000/svg",
      "polygon"
    );
    head.classList.add("arrow-head");

    const angleRad = (angle * Math.PI) / 180;
    const x1 =
      adjustedToX -
      headLength * Math.cos(angleRad - (headAngle * Math.PI) / 180);
    const y1 =
      adjustedToY -
      headLength * Math.sin(angleRad - (headAngle * Math.PI) / 180);
    const x2 =
      adjustedToX -
      headLength * Math.cos(angleRad + (headAngle * Math.PI) / 180);
    const y2 =
      adjustedToY -
      headLength * Math.sin(angleRad + (headAngle * Math.PI) / 180);

    head.setAttribute(
      "points",
      `${adjustedToX},${adjustedToY} ${x1},${y1} ${x2},${y2}`
    );

    svg.appendChild(line);
    svg.appendChild(head);

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ —Å—Ç—Ä–µ–ª–∫—É
    this.currentArrow = svg;

    // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–µ–ª–∫—É –Ω–∞ –¥–æ—Å–∫—É
    this.board.appendChild(svg);

    // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ç–∞–π–º–µ—Ä
    if (this.arrowTimeout) {
      clearTimeout(this.arrowTimeout);
    }

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π —Ç–∞–π–º–µ—Ä –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å—Ç—Ä–µ–ª–∫–∏
    this.arrowTimeout = setTimeout(() => {
      this.removeMoveArrow();
    }, 3000);
  }

  removeMoveArrow() {
    // –û—á–∏—â–∞–µ–º —Ç–∞–π–º–µ—Ä
    if (this.arrowTimeout) {
      clearTimeout(this.arrowTimeout);
      this.arrowTimeout = null;
    }

    // –£–¥–∞–ª—è–µ–º —Å—Ç—Ä–µ–ª–∫—É
    if (this.currentArrow) {
      this.currentArrow.remove();
      this.currentArrow = null;
    }
  }

  handleMoveMade(moveData) {
    console.log("Move made by:", moveData.player, moveData);

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç—Ä–µ–ª–∫—É –¥–ª—è –õ–Æ–ë–û–ì–û —Ö–æ–¥–∞
    setTimeout(() => {
      this.createMoveArrow(
        moveData.fromRow,
        moveData.fromCol,
        moveData.toRow,
        moveData.toCol
      );
    }, 100);

    // –û–ë–ù–û–í–õ–Ø–ï–ú –¢–ï–ö–£–©–ï–ì–û –ò–ì–†–û–ö–ê –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
    if (moveData.currentPlayer) {
      this.currentPlayer = moveData.currentPlayer;
    }

    // ‚òÖ‚òÖ‚òÖ –û–ë–ù–û–í–õ–Ø–ï–ú –ò–ù–§–û–†–ú–ê–¶–ò–Æ –û–ë –ò–ì–†–û–ö–ê–• ‚òÖ‚òÖ‚òÖ
    this.updatePlayersInfo();

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –¥–ª—è –í–°–ï–• –∏–≥—Ä–æ–∫–æ–≤
    this.updateTurnStatus();
  }

  // ‚òÖ‚òÖ‚òÖ –û–ë–ù–û–í–õ–ï–ù–ù–´–ô –ú–ï–¢–û–î –î–õ–Ø –£–ß–ï–¢–ê –ú–ù–û–ñ–ï–°–¢–í–ï–ù–ù–û–ì–û –í–ó–Ø–¢–ò–Ø ‚òÖ‚òÖ‚òÖ
  updateTurnStatus() {
    if (this.continueCapturePiece) {
      this.updateStatus("–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤–∑—è—Ç–∏–µ! –í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â—É—é —à–∞—à–∫—É.");
    } else if (this.currentPlayer === this.playerColor) {
      this.updateStatus("‚úÖ –í–∞—à —Ö–æ–¥!");
    } else {
      this.updateStatus("‚è≥ –•–æ–¥ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞...");
    }
  }

  updateGameState(gameState) {
    // –û—á–∏—â–∞–µ–º –¥–æ—Å–∫—É
    this.clearBoard();

    // –†–∞—Å—Å—Ç–∞–≤–ª—è–µ–º —à–∞—à–∫–∏ —Å–æ–≥–ª–∞—Å–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏—é –∏–≥—Ä—ã
    gameState.pieces.forEach((piece) => {
      this.placePiece(piece.row, piece.col, piece.color, piece.isKing);
    });

    // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞
    this.currentPlayer = gameState.currentPlayer;

    // ‚òÖ‚òÖ‚òÖ –û–ë–ù–û–í–õ–Ø–ï–ú –ò–ù–§–û–†–ú–ê–¶–ò–Æ –û–ë –ò–ì–†–û–ö–ê–• ‚òÖ‚òÖ‚òÖ
    this.updatePlayersInfo();

    // –û–ë–ù–û–í–õ–Ø–ï–ú –°–¢–ê–¢–£–° –•–û–î–ê
    this.updateTurnStatus();

    console.log("Game state updated. Current player:", this.currentPlayer);
  }

  getCell(row, col) {
    return document.querySelector(
      `.cell[data-row="${row}"][data-col="${col}"]`
    );
  }

  highlightCell(row, col, className) {
    const cell = this.getCell(row, col);
    if (cell) {
      // –°–Ω–∞—á–∞–ª–∞ —É–±–∏—Ä–∞–µ–º –≤—Å–µ –≤—ã–¥–µ–ª–µ–Ω–∏—è
      document.querySelectorAll(".cell").forEach((c) => {
        c.classList.remove("selected", "possible-move");
      });
      // –ó–∞—Ç–µ–º –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
      cell.classList.add(className);
    }
  }

  clearSelection() {
    this.selectedPiece = null;
    document.querySelectorAll(".cell").forEach((cell) => {
      cell.classList.remove("selected", "possible-move");
    });
  }

  handleGameOver(result) {
    let winnerText;
    let gameOverMessage;

    if (result.result === "draw") {
      winnerText = "ü§ù –ù–∏—á—å—è!";
      gameOverMessage = "ü§ù –ù–∏—á—å—è!";
    } else if (result.winner) {
      // ‚òÖ‚òÖ‚òÖ –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –õ–û–ì–ò–ö–ê –û–¢–û–ë–†–ê–ñ–ï–ù–ò–Ø –ü–û–ë–ï–î–ò–¢–ï–õ–Ø ‚òÖ‚òÖ‚òÖ
      if (result.surrender) {
        const winnerName =
          result.winner === this.playerColor
            ? this.username
            : this.opponentName;
        const surrenderedPlayer = result.surrenderedPlayer;
        const loserName =
          surrenderedPlayer === this.playerColor
            ? this.username
            : this.opponentName;

        winnerText = `üèÜ ${winnerName} –ø–æ–±–µ–¥–∏–ª!`;
        gameOverMessage = `üèÜ ${winnerName} –ø–æ–±–µ–¥–∏–ª!\n${loserName} —Å–¥–∞–ª—Å—è`;
      } else {
        // –û–±—ã—á–Ω–∞—è –ø–æ–±–µ–¥–∞
        const winnerName =
          result.winner === this.playerColor
            ? this.username
            : this.opponentName;
        const loserName =
          result.winner === this.playerColor
            ? this.opponentName
            : this.username;

        winnerText = `üèÜ ${winnerName} –ø–æ–±–µ–¥–∏–ª!`;
        gameOverMessage = `üèÜ ${winnerName} –ø–æ–±–µ–¥–∏–ª!\n–ø—Ä–æ—Ç–∏–≤ ${loserName}`;
      }
    } else {
      winnerText = "ü§ù –ù–∏—á—å—è!";
      gameOverMessage = "ü§ù –ù–∏—á—å—è!";
    }

    this.updateStatus(`–ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞! ${winnerText}`);

    // –£–¥–∞–ª—è–µ–º —Å—Ç—Ä–µ–ª–∫—É –ø—Ä–∏ –æ–∫–æ–Ω—á–∞–Ω–∏–∏ –∏–≥—Ä—ã
    this.removeMoveArrow();

    // –°–∫—Ä—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∏ –æ–∫–æ–Ω—á–∞–Ω–∏–∏ –∏–≥—Ä—ã
    if (this.gameControls) {
      this.gameControls.style.display = "none";
    }

    // ‚òÖ‚òÖ‚òÖ –í–ê–ñ–ù–û: –ò–°–ü–û–õ–¨–ó–£–ï–ú gameOverModal –î–õ–Ø –û–ö–û–ù–ß–ê–ù–ò–Ø –ò–ì–†–´ ‚òÖ‚òÖ‚òÖ
    const modal = document.getElementById("gameOverModal");
    const messageElement = document.getElementById("gameOverMessage");
    if (modal && messageElement) {
      messageElement.textContent = gameOverMessage;
      modal.style.display = "flex";
    }

    console.log("üéÆ Game over modal shown:", gameOverMessage);
  }

  showRestartContainer() {
    // –°–∫—Ä—ã–≤–∞–µ–º –¥–æ—Å–∫—É –∏ —Å—Ç–∞—Ç—É—Å
    this.board.style.display = "none";
    this.status.style.display = "none";

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –±–ª–æ–∫ —Ä–µ—Å—Ç–∞—Ä—Ç–∞
    this.restartContainer.style.display = "block";
  }

  updateStatus(message) {
    if (this.status) {
      let statusText = message;

      // –ï—Å–ª–∏ —ç—Ç–æ —Å–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (—Å —ç–º–æ–¥–∑–∏), –Ω–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –µ–≥–æ
      const isSystemMessage =
        message.includes("‚úÖ") ||
        message.includes("‚è≥") ||
        message.includes("‚ùå") ||
        message.includes("‚ö†Ô∏è") ||
        message.includes("üéØ") ||
        message.includes("–ü–æ–¥–∫–ª—é—á–µ–Ω–æ") ||
        message.includes("–û–∂–∏–¥–∞–Ω–∏–µ") ||
        message.includes("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å") ||
        message.includes("–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫") ||
        message.includes("–í—ã –∏–≥—Ä–∞–µ—Ç–µ") ||
        message.includes("–°–µ–π—á–∞—Å –Ω–µ –≤–∞—à —Ö–æ–¥") ||
        message.includes("–•–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è") ||
        message.includes("–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø–æ—Ç–µ—Ä—è–Ω–æ") ||
        message.includes("–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è") ||
        message.includes("–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–µ—Ç–∫—É") ||
        message.includes("–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –Ω–∏—á—å–∏") ||
        message.includes("–æ—Ç–∫–ª–æ–Ω–∏–ª –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ") ||
        message.includes("–ó–∞–ø—Ä–æ—Å –Ω–∞ –Ω–æ–≤—É—é –∏–≥—Ä—É") ||
        message.includes("–°–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –Ω–æ–≤—É—é –∏–≥—Ä—É") ||
        message.includes("–æ—Ç–∫–ª–æ–Ω–∏–ª –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∏–≥—Ä—ã") ||
        message.includes("–ú–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –≤–∑—è—Ç–∏–µ") ||
        message.includes("–í—ã —Å–¥–∞–ª–∏—Å—å") ||
        message.includes("–ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–æ–π") ||
        message.includes("–†—É—Å—Å–∫–∏–µ –Ω–µ —Å–¥–∞—é—Ç—Å—è");

      if (this.username && this.playerColor && !isSystemMessage) {
        const colorText = this.playerColor === "white" ? "–±–µ–ª—ã–µ" : "—á—ë—Ä–Ω—ã–µ";
        const currentTurnColor =
          this.currentPlayer === "white" ? "–±–µ–ª—ã—Ö" : "—á—ë—Ä–Ω—ã—Ö";
        statusText = `${this.username} (${colorText}) - –•–æ–¥ ${currentTurnColor}`;
      } else if (this.username && this.playerColor && isSystemMessage) {
        const colorText = this.playerColor === "white" ? "–±–µ–ª—ã–µ" : "—á—ë—Ä–Ω—ã–µ";
        statusText = `${this.username} (${colorText}) - ${message}`;
      } else if (this.username) {
        statusText = `${this.username} - ${message}`;
      }

      this.status.textContent = statusText;
    }
    console.log("Status:", message, "Current player:", this.currentPlayer);
  }
}

// ‚òÖ‚òÖ‚òÖ –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –ì–õ–û–ë–ê–õ–¨–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø ‚òÖ‚òÖ‚òÖ
function startNewGame() {
  console.log("üîÑ startNewGame called globally");

  if (
    window.checkersGame &&
    typeof window.checkersGame.showNewGameModal === "function"
  ) {
    // –°–Ω–∞—á–∞–ª–∞ —Å–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è –∏–≥—Ä—ã
    window.checkersGame.hideGameOverModal();
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–∫–Ω–æ –Ω–æ–≤–æ–π –∏–≥—Ä—ã
    window.checkersGame.showNewGameModal();
  } else {
    console.error("‚ùå checkersGame not available, reloading page");
    location.reload();
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –∏–≥—Ä—É –∫–æ–≥–¥–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–≥—Ä—É–∂–µ–Ω–∞
document.addEventListener("DOMContentLoaded", () => {
  console.log("üöÄ Starting Checkers Game...");
  window.checkersGame = new CheckersGame(); // ‚òÖ‚òÖ‚òÖ –°–û–•–†–ê–ù–Ø–ï–ú –í –ì–õ–û–ë–ê–õ–¨–ù–£–Æ –ü–ï–†–ï–ú–ï–ù–ù–£–Æ ‚òÖ‚òÖ‚òÖ
});

// –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –ø—Ä–∏ –≤–∏–¥–∏–º–æ—Å—Ç–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener("visibilitychange", () => {
  if (!document.hidden) {
    // –°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å–Ω–æ–≤–∞ —Å—Ç–∞–ª–∞ –∞–∫—Ç–∏–≤–Ω–æ–π - –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
    console.log("Page became visible, checking connection...");
  }
});


