// script.js - –§–ò–ù–ê–õ–¨–ù–ê–Ø –í–ï–†–°–ò–Ø –¥–ª—è —à–∞—à–µ–∫ —Å —Ä–µ—Å—Ç–∞—Ä—Ç–æ–º –∏ —Å—Ç—Ä–µ–ª–∫–æ–π –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è –æ–±–æ–∏—Ö –∏–≥—Ä–æ–∫–æ–≤
class CheckersGame {
    constructor() {
        this.board = document.getElementById('board');
        this.status = document.getElementById('status');
        this.restartContainer = document.getElementById('restartContainer');
        this.restartButton = document.getElementById('restartButton');
        this.currentPlayer = 'white';
        this.selectedPiece = null;
        this.possibleMoves = [];
        this.playerColor = null;
        this.ws = null;
        this.currentArrow = null; // –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–µ–ª–∫–∏
        
        this.initializeGame();
        this.setupWebSocket();
        this.setupRestartButton();
    }

    initializeGame() {
        this.createBoard();
        this.updateStatus('–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É...');
    }

    createBoard() {
        this.board.innerHTML = '';
        for (let row = 0; row < 8; row++) {
            for (let col = 0; col < 8; col++) {
                const cell = document.createElement('div');
                cell.className = `cell ${(row + col) % 2 === 0 ? 'white' : 'black'}`;
                cell.dataset.row = row;
                cell.dataset.col = col;
                
                // –¢–æ–ª—å–∫–æ —á–µ—Ä–Ω—ã–µ –∫–ª–µ—Ç–∫–∏ –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã
                if ((row + col) % 2 !== 0) {
                    cell.addEventListener('click', () => this.handleCellClick(row, col));
                }
                
                this.board.appendChild(cell);
            }
        }
    }

    handleCellClick(row, col) {
        console.log('Cell clicked:', row, col);
        
        if (!this.playerColor) {
            this.updateStatus('–û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...');
            return;
        }
        
        if (this.playerColor !== this.currentPlayer) {
            this.updateStatus('–°–µ–π—á–∞—Å –Ω–µ –≤–∞—à —Ö–æ–¥!');
            return;
        }
        
        const cell = this.getCell(row, col);
        const piece = cell.querySelector('.piece');
        
        // –ï—Å–ª–∏ —É–∂–µ –≤—ã–±—Ä–∞–Ω–∞ —à–∞—à–∫–∞ - –ø—Ä–æ–±—É–µ–º —Å–¥–µ–ª–∞—Ç—å —Ö–æ–¥
        if (this.selectedPiece) {
            this.makeMove(this.selectedPiece.row, this.selectedPiece.col, row, col);
            this.clearSelection();
        } 
        // –ï—Å–ª–∏ –∫–ª–∏–∫–Ω—É–ª–∏ –Ω–∞ —Å–≤–æ—é —à–∞—à–∫—É - –≤—ã–±–∏—Ä–∞–µ–º –µ—ë
        else if (piece && piece.dataset.color === this.playerColor) {
            this.selectedPiece = { row, col };
            this.highlightCell(row, col, 'selected');
            this.updateStatus('–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–µ—Ç–∫—É –¥–ª—è —Ö–æ–¥–∞');
        }
    }

    makeMove(fromRow, fromCol, toRow, toCol) {
        if (!this.ws || this.ws.readyState !== WebSocket.OPEN) {
            this.updateStatus('–ù–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º');
            return;
        }

        const moveData = {
            fromRow: fromRow,
            fromCol: fromCol,
            toRow: toRow,
            toCol: toCol
        };

        console.log('Sending move:', moveData);
        this.ws.send(JSON.stringify({
            type: 'move',
            data: moveData
        }));
        
        this.updateStatus('–•–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è...');
        
        // –°—Ç—Ä–µ–ª–∫–∞ —Ç–µ–ø–µ—Ä—å –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–µ—Ä–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ moveMade
    }

    setupWebSocket() {
        const protocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';
        const wsUrl = `${protocol}//${window.location.host}`;
        
        console.log('Connecting to WebSocket:', wsUrl);
        
        this.ws = new WebSocket(wsUrl);
        
        this.ws.onopen = () => {
            console.log('‚úÖ WebSocket connected successfully');
            this.updateStatus('–ü–æ–¥–∫–ª—é—á–µ–Ω–æ! –û–∂–∏–¥–∞–Ω–∏–µ –≤—Ç–æ—Ä–æ–≥–æ –∏–≥—Ä–æ–∫–∞...');
        };

        this.ws.onmessage = (event) => {
            try {
                const message = JSON.parse(event.data);
                console.log('üì® Received message:', message);
                this.handleServerMessage(message);
            } catch (error) {
                console.error('‚ùå Error parsing message:', error);
            }
        };

        this.ws.onclose = (event) => {
            console.log('üîå WebSocket disconnected:', event.code, event.reason);
            this.updateStatus('–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø–æ—Ç–µ—Ä—è–Ω–æ. –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã...');
            setTimeout(() => {
                this.setupWebSocket();
            }, 3000);
        };

        this.ws.onerror = (error) => {
            console.error('üí• WebSocket error:', error);
            this.updateStatus('–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º');
        };
    }

    setupRestartButton() {
        this.restartButton.addEventListener('click', () => {
            this.restartGame();
        });
    }

    restartGame() {
        console.log('Restarting game...');
        
        // –£–¥–∞–ª—è–µ–º —Å—Ç—Ä–µ–ª–∫—É
        this.removeMoveArrow();
        
        // –°–∫—Ä—ã–≤–∞–µ–º –±–ª–æ–∫ —Ä–µ—Å—Ç–∞—Ä—Ç–∞
        this.restartContainer.style.display = 'none';
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ—Å–∫—É –∏ —Å—Ç–∞—Ç—É—Å
        this.board.style.display = 'grid';
        this.status.style.display = 'block';
        
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
        this.selectedPiece = null;
        this.possibleMoves = [];
        this.playerColor = null;
        this.currentPlayer = 'white';
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
        this.updateStatus('–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –∏–≥—Ä—ã...');
        
        // –û—á–∏—â–∞–µ–º –¥–æ—Å–∫—É
        this.clearBoard();
        
        // –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É
        if (this.ws) {
            this.ws.close();
        }
        
        // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –∏–≥—Ä—É —á–µ—Ä–µ–∑ –Ω–µ–±–æ–ª—å—à–æ–π —Ç–∞–π–º–∞—É—Ç
        setTimeout(() => {
            this.setupWebSocket();
        }, 1000);
    }

    clearBoard() {
        // –û—á–∏—â–∞–µ–º –≤—Å–µ —à–∞—à–∫–∏ —Å –¥–æ—Å–∫–∏
        document.querySelectorAll('.piece').forEach(piece => piece.remove());
    }

    createMoveArrow(fromRow, fromCol, toRow, toCol) {
        // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é —Å—Ç—Ä–µ–ª–∫—É, –µ—Å–ª–∏ –µ—Å—Ç—å
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª—è–µ–º —Å—Ç—Ä–µ–ª–∫—É —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥—ã
        setTimeout(() => {
            this.removeMoveArrow();
        }, 5000); // ‚Üê –≠–¢–ê –°–¢–†–û–ö–ê (3000 –º—Å = 5 —Å–µ–∫—É–Ω–¥—ã)
        
        const fromCell = this.getCell(fromRow, fromCol);
        const toCell = this.getCell(toRow, toCol);
        
        if (!fromCell || !toCell) return;
        
        // –ü–æ–ª—É—á–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Ü–µ–Ω—Ç—Ä–æ–≤ –∫–ª–µ—Ç–æ–∫
        const fromRect = fromCell.getBoundingClientRect();
        const toRect = toCell.getBoundingClientRect();
        const boardRect = this.board.getBoundingClientRect();
        
        // –í—ã—á–∏—Å–ª—è–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –¥–æ—Å–∫–∏
        const fromX = fromRect.left + fromRect.width / 2 - boardRect.left;
        const fromY = fromRect.top + fromRect.height / 2 - boardRect.top;
        const toX = toRect.left + toRect.width / 2 - boardRect.left;
        const toY = toRect.top + toRect.height / 2 - boardRect.top;
        
        // –°–æ–∑–¥–∞–µ–º SVG —ç–ª–µ–º–µ–Ω—Ç –¥–ª—è —Å—Ç—Ä–µ–ª–∫–∏
        const svg = document.createElementNS("http://www.w3.org/2000/svg", "svg");
        svg.classList.add('move-arrow');
        svg.setAttribute('width', '100%');
        svg.setAttribute('height', '100%');
        svg.style.position = 'absolute';
        svg.style.top = '0';
        svg.style.left = '0';
        svg.style.pointerEvents = 'none';
        
        // –í—ã—á–∏—Å–ª—è–µ–º –¥–ª–∏–Ω—É –∏ —É–≥–æ–ª —Å—Ç—Ä–µ–ª–∫–∏
        const dx = toX - fromX;
        const dy = toY - fromY;
        const length = Math.sqrt(dx * dx + dy * dy);
        const angle = Math.atan2(dy, dx) * 180 / Math.PI;
        
        // –£–∫–æ—Ä–∞—á–∏–≤–∞–µ–º —Å—Ç—Ä–µ–ª–∫—É, —á—Ç–æ–±—ã –æ–Ω–∞ –Ω–µ –∑–∞—Ö–æ–¥–∏–ª–∞ –Ω–∞ —à–∞—à–∫–∏
        const shortenBy = 25;
        const shortenedLength = length - shortenBy * 2;
        const shortenX = (dx / length) * shortenBy;
        const shortenY = (dy / length) * shortenBy;
        
        const adjustedFromX = fromX + shortenX;
        const adjustedFromY = fromY + shortenY;
        const adjustedToX = toX - shortenX;
        const adjustedToY = toY - shortenY;
        
        // –°–æ–∑–¥–∞–µ–º –ª–∏–Ω–∏—é —Å—Ç—Ä–µ–ª–∫–∏
        const line = document.createElementNS("http://www.w3.org/2000/svg", "line");
        line.classList.add('arrow-line', 'arrow-animation');
        line.setAttribute('x1', adjustedFromX);
        line.setAttribute('y1', adjustedFromY);
        line.setAttribute('x2', adjustedToX);
        line.setAttribute('y2', adjustedToY);
        
        // –°–æ–∑–¥–∞–µ–º –Ω–∞–∫–æ–Ω–µ—á–Ω–∏–∫ —Å—Ç—Ä–µ–ª–∫–∏
        const headLength = 15;
        const headAngle = 30;
        
        const head = document.createElementNS("http://www.w3.org/2000/svg", "polygon");
        head.classList.add('arrow-head');
        
        const angleRad = angle * Math.PI / 180;
        const x1 = adjustedToX - headLength * Math.cos(angleRad - headAngle * Math.PI / 180);
        const y1 = adjustedToY - headLength * Math.sin(angleRad - headAngle * Math.PI / 180);
        const x2 = adjustedToX - headLength * Math.cos(angleRad + headAngle * Math.PI / 180);
        const y2 = adjustedToY - headLength * Math.sin(angleRad + headAngle * Math.PI / 180);
        
        head.setAttribute('points', `${adjustedToX},${adjustedToY} ${x1},${y1} ${x2},${y2}`);
        
        svg.appendChild(line);
        svg.appendChild(head);
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ —Å—Ç—Ä–µ–ª–∫—É
        this.currentArrow = svg;
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–µ–ª–∫—É –Ω–∞ –¥–æ—Å–∫—É
        this.board.appendChild(svg);
        
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª—è–µ–º —Å—Ç—Ä–µ–ª–∫—É —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
        setTimeout(() => {
            this.removeMoveArrow();
        }, 3000);
    }

    removeMoveArrow() {
        if (this.currentArrow) {
            this.currentArrow.remove();
            this.currentArrow = null;
        }
    }

    handleServerMessage(message) {
        switch (message.type) {
            case 'playerAssigned':
                this.playerColor = message.color;
                const colorText = message.color === 'white' ? '–±–µ–ª—ã–µ' : '—á–µ—Ä–Ω—ã–µ';
                this.updateStatus(`–í—ã –∏–≥—Ä–∞–µ—Ç–µ –∑–∞ ${colorText}. –û–∂–∏–¥–∞–Ω–∏–µ –≤—Ç–æ—Ä–æ–≥–æ –∏–≥—Ä–æ–∫–∞...`);
                break;
                
            case 'gameState':
                this.updateGameState(message.data);
                break;
                
            case 'moveResult':
                if (message.valid) {
                    this.updateGameState(message.gameState);
                    const statusText = message.gameState.currentPlayer === this.playerColor ? 
                        '‚úÖ –í–∞—à —Ö–æ–¥!' : '‚è≥ –•–æ–¥ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞...';
                    this.updateStatus(statusText);
                } else {
                    this.updateStatus(`‚ùå ${message.message}`);
                }
                break;
                
            case 'moveMade': // –ù–û–í–´–ô CASE - –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ö–æ–¥–∞ –æ—Ç –ª—é–±–æ–≥–æ –∏–≥—Ä–æ–∫–∞
                this.handleMoveMade(message.data);
                break;
                
            case 'gameOver':
                this.handleGameOver(message);
                break;
                
            case 'error':
                this.updateStatus(`‚ö†Ô∏è ${message.message}`);
                break;
                
            default:
                console.log('Unknown message type:', message.type);
        }
    }

    handleMoveMade(moveData) {
        console.log('Move made by:', moveData.player, moveData);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç—Ä–µ–ª–∫—É –¥–ª—è –õ–Æ–ë–û–ì–û —Ö–æ–¥–∞, –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —Ç–æ–≥–æ, –∫—Ç–æ –µ–≥–æ —Å–¥–µ–ª–∞–ª
        this.createMoveArrow(
            moveData.fromRow, 
            moveData.fromCol, 
            moveData.toRow, 
            moveData.toCol
        );
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å, –µ—Å–ª–∏ —Ö–æ–¥ —Å–¥–µ–ª–∞–ª –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫
        if (moveData.player !== this.playerColor) {
            this.updateStatus('‚è≥ –•–æ–¥ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞...');
        }
    }

    updateGameState(gameState) {
        // –û—á–∏—â–∞–µ–º –¥–æ—Å–∫—É
        this.clearBoard();
        
        // –†–∞—Å—Å—Ç–∞–≤–ª—è–µ–º —à–∞—à–∫–∏ —Å–æ–≥–ª–∞—Å–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏—é –∏–≥—Ä—ã
        gameState.pieces.forEach(piece => {
            this.placePiece(piece.row, piece.col, piece.color, piece.isKing);
        });
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞
        this.currentPlayer = gameState.currentPlayer;
        
        console.log('Game state updated. Current player:', this.currentPlayer);
    }

    placePiece(row, col, color, isKing = false) {
        const cell = this.getCell(row, col);
        if (!cell) return;
        
        const piece = document.createElement('div');
        piece.className = `piece ${color} ${isKing ? 'king' : ''}`;
        piece.dataset.color = color;
        piece.dataset.king = isKing;
        
        // –°–æ–∑–¥–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —à–∞—à–∫–∏
        const img = document.createElement('img');
        let imageSrc;
        
        if (color === 'white') {
            imageSrc = isKing ? 'shabedam.png' : 'shabe.png';
        } else {
            imageSrc = isKing ? 'shachdam.png' : 'shach.png';
        }
        
        img.src = imageSrc;
        img.alt = isKing ? `${color} –¥–∞–º–∫–∞` : `${color} —à–∞—à–∫–∞`;
        img.onerror = () => {
            console.error(`Failed to load image: ${imageSrc}`);
            // –ó–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç - —Ü–≤–µ—Ç–Ω–æ–π –∫—Ä—É–≥
            piece.style.backgroundColor = color;
            piece.style.border = '2px solid #000';
            if (isKing) {
                piece.innerHTML = '‚ôî';
                piece.style.color = 'gold';
            }
        };
        
        piece.appendChild(img);
        cell.appendChild(piece);
    }

    getCell(row, col) {
        return document.querySelector(`.cell[data-row="${row}"][data-col="${col}"]`);
    }

    highlightCell(row, col, className) {
        const cell = this.getCell(row, col);
        if (cell) {
            // –°–Ω–∞—á–∞–ª–∞ —É–±–∏—Ä–∞–µ–º –≤—Å–µ –≤—ã–¥–µ–ª–µ–Ω–∏—è
            document.querySelectorAll('.cell').forEach(c => {
                c.classList.remove('selected', 'possible-move');
            });
            // –ó–∞—Ç–µ–º –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
            cell.classList.add(className);
        }
    }

    clearSelection() {
        this.selectedPiece = null;
        document.querySelectorAll('.cell').forEach(cell => {
            cell.classList.remove('selected', 'possible-move');
        });
    }

    handleGameOver(result) {
        const winnerText = result.winner ? 
            `üèÜ –ü–æ–±–µ–¥–∏—Ç–µ–ª—å: ${result.winner === 'white' ? '–±–µ–ª—ã–µ' : '—á–µ—Ä–Ω—ã–µ'}` : 
            'ü§ù –ù–∏—á—å—è!';
        this.updateStatus(`–ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞! ${winnerText}`);
        
        // –£–¥–∞–ª—è–µ–º —Å—Ç—Ä–µ–ª–∫—É –ø—Ä–∏ –æ–∫–æ–Ω—á–∞–Ω–∏–∏ –∏–≥—Ä—ã
        this.removeMoveArrow();
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –±–ª–æ–∫ —Ä–µ—Å—Ç–∞—Ä—Ç–∞
        this.showRestartContainer();
    }

    showRestartContainer() {
        // –°–∫—Ä—ã–≤–∞–µ–º –¥–æ—Å–∫—É –∏ —Å—Ç–∞—Ç—É—Å
        this.board.style.display = 'none';
        this.status.style.display = 'none';
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –±–ª–æ–∫ —Ä–µ—Å—Ç–∞—Ä—Ç–∞
        this.restartContainer.style.display = 'block';
    }

    updateStatus(message) {
        if (this.status) {
            this.status.textContent = message;
        }
        console.log('Status:', message);
    }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –∏–≥—Ä—É –∫–æ–≥–¥–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–≥—Ä—É–∂–µ–Ω–∞
document.addEventListener('DOMContentLoaded', () => {
    console.log('üöÄ Starting Checkers Game...');
    new CheckersGame();
});

// –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –ø—Ä–∏ –≤–∏–¥–∏–º–æ—Å—Ç–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('visibilitychange', () => {
    if (!document.hidden) {
        // –°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å–Ω–æ–≤–∞ —Å—Ç–∞–ª–∞ –∞–∫—Ç–∏–≤–Ω–æ–π - –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
        console.log('Page became visible, checking connection...');
    }
});


